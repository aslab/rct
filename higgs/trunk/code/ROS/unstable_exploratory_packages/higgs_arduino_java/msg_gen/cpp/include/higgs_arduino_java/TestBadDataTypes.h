/* Auto-generated by genmsg_cpp for file /usr/local/ros_aslab/higgs_arduino_java/msg/TestBadDataTypes.msg */
#ifndef HIGGS_ARDUINO_JAVA_MESSAGE_TESTBADDATATYPES_H
#define HIGGS_ARDUINO_JAVA_MESSAGE_TESTBADDATATYPES_H
#include <string>
#include <vector>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/message.h"
#include "ros/time.h"

#include "std_msgs/Byte.h"
#include "std_msgs/ByteMultiArray.h"

namespace higgs_arduino_java
{
template <class ContainerAllocator>
struct TestBadDataTypes_ : public ros::Message
{
  typedef TestBadDataTypes_<ContainerAllocator> Type;

  TestBadDataTypes_()
  : Byte_f()
  , ByteMultiArray_f()
  {
  }

  TestBadDataTypes_(const ContainerAllocator& _alloc)
  : Byte_f()
  , ByteMultiArray_f()
  {
    Byte_f.assign( ::std_msgs::Byte_<ContainerAllocator> (_alloc));
    ByteMultiArray_f.assign( ::std_msgs::ByteMultiArray_<ContainerAllocator> (_alloc));
  }

  typedef boost::array< ::std_msgs::Byte_<ContainerAllocator> , 2>  _Byte_f_type;
  boost::array< ::std_msgs::Byte_<ContainerAllocator> , 2>  Byte_f;

  typedef boost::array< ::std_msgs::ByteMultiArray_<ContainerAllocator> , 1>  _ByteMultiArray_f_type;
  boost::array< ::std_msgs::ByteMultiArray_<ContainerAllocator> , 1>  ByteMultiArray_f;


  ROS_DEPRECATED uint32_t get_Byte_f_size() const { return (uint32_t)Byte_f.size(); }
  ROS_DEPRECATED uint32_t get_ByteMultiArray_f_size() const { return (uint32_t)ByteMultiArray_f.size(); }
private:
  static const char* __s_getDataType_() { return "higgs_arduino_java/TestBadDataTypes"; }
public:
  ROS_DEPRECATED static const std::string __s_getDataType() { return __s_getDataType_(); }

  ROS_DEPRECATED const std::string __getDataType() const { return __s_getDataType_(); }

private:
  static const char* __s_getMD5Sum_() { return "f0fea41d38f14ed745582d619f53bcd0"; }
public:
  ROS_DEPRECATED static const std::string __s_getMD5Sum() { return __s_getMD5Sum_(); }

  ROS_DEPRECATED const std::string __getMD5Sum() const { return __s_getMD5Sum_(); }

private:
  static const char* __s_getMessageDefinition_() { return "# Unfortunately, can't test these fully because roscpp message generation\n\
# is broken. \n\
\n\
std_msgs/Byte[2] Byte_f\n\
std_msgs/ByteMultiArray[1] ByteMultiArray_f\n\
\n\
================================================================================\n\
MSG: std_msgs/Byte\n\
byte data\n\
\n\
================================================================================\n\
MSG: std_msgs/ByteMultiArray\n\
# Please look at the MultiArrayLayout message definition for\n\
# documentation on all multiarrays.\n\
\n\
MultiArrayLayout  layout        # specification of data layout\n\
byte[]            data          # array of data\n\
\n\
\n\
================================================================================\n\
MSG: std_msgs/MultiArrayLayout\n\
# The multiarray declares a generic multi-dimensional array of a\n\
# particular data type.  Dimensions are ordered from outer most\n\
# to inner most.\n\
\n\
MultiArrayDimension[] dim # Array of dimension properties\n\
uint32 data_offset        # padding bytes at front of data\n\
\n\
# Accessors should ALWAYS be written in terms of dimension stride\n\
# and specified outer-most dimension first.\n\
# \n\
# multiarray(i,j,k) = data[data_offset + dim_stride[1]*i + dim_stride[2]*j + k]\n\
#\n\
# A standard, 3-channel 640x480 image with interleaved color channels\n\
# would be specified as:\n\
#\n\
# dim[0].label  = \"height\"\n\
# dim[0].size   = 480\n\
# dim[0].stride = 3*640*480 = 921600  (note dim[0] stride is just size of image)\n\
# dim[1].label  = \"width\"\n\
# dim[1].size   = 640\n\
# dim[1].stride = 3*640 = 1920\n\
# dim[2].label  = \"channel\"\n\
# dim[2].size   = 3\n\
# dim[2].stride = 3\n\
#\n\
# multiarray(i,j,k) refers to the ith row, jth column, and kth channel.\n\
================================================================================\n\
MSG: std_msgs/MultiArrayDimension\n\
string label   # label of given dimension\n\
uint32 size    # size of given dimension (in type units)\n\
uint32 stride  # stride of given dimension\n\
"; }
public:
  ROS_DEPRECATED static const std::string __s_getMessageDefinition() { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED const std::string __getMessageDefinition() const { return __s_getMessageDefinition_(); }

  ROS_DEPRECATED virtual uint8_t *serialize(uint8_t *write_ptr, uint32_t seq) const
  {
    ros::serialization::OStream stream(write_ptr, 1000000000);
    ros::serialization::serialize(stream, Byte_f);
    ros::serialization::serialize(stream, ByteMultiArray_f);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint8_t *deserialize(uint8_t *read_ptr)
  {
    ros::serialization::IStream stream(read_ptr, 1000000000);
    ros::serialization::deserialize(stream, Byte_f);
    ros::serialization::deserialize(stream, ByteMultiArray_f);
    return stream.getData();
  }

  ROS_DEPRECATED virtual uint32_t serializationLength() const
  {
    uint32_t size = 0;
    size += ros::serialization::serializationLength(Byte_f);
    size += ros::serialization::serializationLength(ByteMultiArray_f);
    return size;
  }

  typedef boost::shared_ptr< ::higgs_arduino_java::TestBadDataTypes_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::higgs_arduino_java::TestBadDataTypes_<ContainerAllocator>  const> ConstPtr;
}; // struct TestBadDataTypes
typedef  ::higgs_arduino_java::TestBadDataTypes_<std::allocator<void> > TestBadDataTypes;

typedef boost::shared_ptr< ::higgs_arduino_java::TestBadDataTypes> TestBadDataTypesPtr;
typedef boost::shared_ptr< ::higgs_arduino_java::TestBadDataTypes const> TestBadDataTypesConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::higgs_arduino_java::TestBadDataTypes_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::higgs_arduino_java::TestBadDataTypes_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace higgs_arduino_java

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator>
struct MD5Sum< ::higgs_arduino_java::TestBadDataTypes_<ContainerAllocator> > {
  static const char* value() 
  {
    return "f0fea41d38f14ed745582d619f53bcd0";
  }

  static const char* value(const  ::higgs_arduino_java::TestBadDataTypes_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xf0fea41d38f14ed7ULL;
  static const uint64_t static_value2 = 0x45582d619f53bcd0ULL;
};

template<class ContainerAllocator>
struct DataType< ::higgs_arduino_java::TestBadDataTypes_<ContainerAllocator> > {
  static const char* value() 
  {
    return "higgs_arduino_java/TestBadDataTypes";
  }

  static const char* value(const  ::higgs_arduino_java::TestBadDataTypes_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::higgs_arduino_java::TestBadDataTypes_<ContainerAllocator> > {
  static const char* value() 
  {
    return "# Unfortunately, can't test these fully because roscpp message generation\n\
# is broken. \n\
\n\
std_msgs/Byte[2] Byte_f\n\
std_msgs/ByteMultiArray[1] ByteMultiArray_f\n\
\n\
================================================================================\n\
MSG: std_msgs/Byte\n\
byte data\n\
\n\
================================================================================\n\
MSG: std_msgs/ByteMultiArray\n\
# Please look at the MultiArrayLayout message definition for\n\
# documentation on all multiarrays.\n\
\n\
MultiArrayLayout  layout        # specification of data layout\n\
byte[]            data          # array of data\n\
\n\
\n\
================================================================================\n\
MSG: std_msgs/MultiArrayLayout\n\
# The multiarray declares a generic multi-dimensional array of a\n\
# particular data type.  Dimensions are ordered from outer most\n\
# to inner most.\n\
\n\
MultiArrayDimension[] dim # Array of dimension properties\n\
uint32 data_offset        # padding bytes at front of data\n\
\n\
# Accessors should ALWAYS be written in terms of dimension stride\n\
# and specified outer-most dimension first.\n\
# \n\
# multiarray(i,j,k) = data[data_offset + dim_stride[1]*i + dim_stride[2]*j + k]\n\
#\n\
# A standard, 3-channel 640x480 image with interleaved color channels\n\
# would be specified as:\n\
#\n\
# dim[0].label  = \"height\"\n\
# dim[0].size   = 480\n\
# dim[0].stride = 3*640*480 = 921600  (note dim[0] stride is just size of image)\n\
# dim[1].label  = \"width\"\n\
# dim[1].size   = 640\n\
# dim[1].stride = 3*640 = 1920\n\
# dim[2].label  = \"channel\"\n\
# dim[2].size   = 3\n\
# dim[2].stride = 3\n\
#\n\
# multiarray(i,j,k) refers to the ith row, jth column, and kth channel.\n\
================================================================================\n\
MSG: std_msgs/MultiArrayDimension\n\
string label   # label of given dimension\n\
uint32 size    # size of given dimension (in type units)\n\
uint32 stride  # stride of given dimension\n\
";
  }

  static const char* value(const  ::higgs_arduino_java::TestBadDataTypes_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::higgs_arduino_java::TestBadDataTypes_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.Byte_f);
    stream.next(m.ByteMultiArray_f);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct TestBadDataTypes_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::higgs_arduino_java::TestBadDataTypes_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::higgs_arduino_java::TestBadDataTypes_<ContainerAllocator> & v) 
  {
    s << indent << "Byte_f[]" << std::endl;
    for (size_t i = 0; i < v.Byte_f.size(); ++i)
    {
      s << indent << "  Byte_f[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::std_msgs::Byte_<ContainerAllocator> >::stream(s, indent + "    ", v.Byte_f[i]);
    }
    s << indent << "ByteMultiArray_f[]" << std::endl;
    for (size_t i = 0; i < v.ByteMultiArray_f.size(); ++i)
    {
      s << indent << "  ByteMultiArray_f[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::std_msgs::ByteMultiArray_<ContainerAllocator> >::stream(s, indent + "    ", v.ByteMultiArray_f[i]);
    }
  }
};


} // namespace message_operations
} // namespace ros

#endif // HIGGS_ARDUINO_JAVA_MESSAGE_TESTBADDATATYPES_H

