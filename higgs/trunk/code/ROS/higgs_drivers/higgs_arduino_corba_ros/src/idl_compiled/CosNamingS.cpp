// -*- C++ -*-
//
// $Id$

// ****  Code generated by the The ACE ORB (TAO) IDL Compiler ****
// TAO and the TAO IDL Compiler have been developed by:
//       Center for Distributed Object Computing
//       Washington University
//       St. Louis, MO
//       USA
//       http://www.cs.wustl.edu/~schmidt/doc-center.html
// and
//       Distributed Object Computing Laboratory
//       University of California at Irvine
//       Irvine, CA
//       USA
//       http://doc.ece.uci.edu/
// and
//       Institute for Software Integrated Systems
//       Vanderbilt University
//       Nashville, TN
//       USA
//       http://www.isis.vanderbilt.edu/
//
// Information about TAO is available at:
//     http://www.cs.wustl.edu/~schmidt/TAO.html


// TAO_IDL - Generated from 
// ../../../ACE_wrappers/TAO/TAO_IDL/be/be_codegen.cpp:703

#ifndef _TAO_IDL_COSNAMINGS_CPP_
#define _TAO_IDL_COSNAMINGS_CPP_


#include "CosNamingS.h"
#include "tao/PortableServer/Operation_Table_Dynamic_Hash.h"
#include "tao/PortableServer/Upcall_Command.h"
#include "tao/PortableServer/Upcall_Wrapper.h"
#include "tao/TAO_Server_Request.h"
#include "tao/ORB_Core.h"
#include "tao/Profile.h"
#include "tao/Stub.h"
#include "tao/IFR_Client_Adapter.h"
#include "tao/Object_T.h"
#include "tao/AnyTypeCode/TypeCode.h"
#include "tao/AnyTypeCode/DynamicC.h"
#include "tao/CDR.h"
#include "tao/operation_details.h"
#include "tao/PortableInterceptor.h"
#include "tao/PortableServer/Basic_SArguments.h"
#include "tao/PortableServer/Object_SArgument_T.h"
#include "tao/PortableServer/Special_Basic_SArguments.h"
#include "tao/PortableServer/UB_String_SArguments.h"
#include "tao/PortableServer/Var_Size_SArgument_T.h"
#include "tao/PortableServer/TypeCode_SArg_Traits.h"
#include "tao/PortableServer/Object_SArg_Traits.h"
#include "tao/PortableServer/get_arg.h"
#include "tao/Special_Basic_Arguments.h"
#include "tao/UB_String_Arguments.h"
#include "tao/Basic_Arguments.h"
#include "tao/Object_Argument_T.h"
#include "tao/Special_Basic_Arguments.h"
#include "tao/UB_String_Arguments.h"
#include "tao/Var_Size_Argument_T.h"
#include "ace/Dynamic_Service.h"
#include "ace/Malloc_Allocator.h"

#if !defined (__ACE_INLINE__)
#include "CosNamingS.inl"
#endif /* !defined INLINE */

// TAO_IDL - Generated from
// ../../../ACE_wrappers/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:73

TAO_BEGIN_VERSIONED_NAMESPACE_DECL


// Arg traits specializations.
namespace TAO
{
  
  // TAO_IDL - Generated from
  // ../../../ACE_wrappers/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:620

#if !defined (_COSNAMING_NAME__SARG_TRAITS_)
#define _COSNAMING_NAME__SARG_TRAITS_
  
  template<>
  class SArg_Traits<CosNaming::Name>
    : public
        Var_Size_SArg_Traits_T<
            CosNaming::Name,
            TAO::Any_Insert_Policy_Stream <CosNaming::Name>
          >
  {
  };

#endif /* end #if !defined */
  
  // TAO_IDL - Generated from
  // ../../../ACE_wrappers/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:868

#if !defined (_COSNAMING_BINDING__SARG_TRAITS_)
#define _COSNAMING_BINDING__SARG_TRAITS_
  
  template<>
  class SArg_Traits<CosNaming::Binding>
    : public
        Var_Size_SArg_Traits_T<
            CosNaming::Binding,
            TAO::Any_Insert_Policy_Stream <CosNaming::Binding>
          >
  {
  };

#endif /* end #if !defined */
  
  // TAO_IDL - Generated from
  // ../../../ACE_wrappers/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:620

#if !defined (_COSNAMING_BINDINGLIST__SARG_TRAITS_)
#define _COSNAMING_BINDINGLIST__SARG_TRAITS_
  
  template<>
  class SArg_Traits<CosNaming::BindingList>
    : public
        Var_Size_SArg_Traits_T<
            CosNaming::BindingList,
            TAO::Any_Insert_Policy_Stream <CosNaming::BindingList>
          >
  {
  };

#endif /* end #if !defined */
  
  // TAO_IDL - Generated from
  // ../../../ACE_wrappers/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:141

#if !defined (_COSNAMING_BINDINGITERATOR__SARG_TRAITS_)
#define _COSNAMING_BINDINGITERATOR__SARG_TRAITS_
  
  template<>
  class  SArg_Traits<CosNaming::BindingIterator>
    : public
        Object_SArg_Traits_T<
            CosNaming::BindingIterator_ptr,
            CosNaming::BindingIterator_var,
            CosNaming::BindingIterator_out,
            TAO::Any_Insert_Policy_Stream <CosNaming::BindingIterator_ptr>
          >
  {
  };

#endif /* end #if !defined */
  
  // TAO_IDL - Generated from
  // ../../../ACE_wrappers/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:141

#if !defined (_COSNAMING_NAMINGCONTEXT__SARG_TRAITS_)
#define _COSNAMING_NAMINGCONTEXT__SARG_TRAITS_
  
  template<>
  class  SArg_Traits<CosNaming::NamingContext>
    : public
        Object_SArg_Traits_T<
            CosNaming::NamingContext_ptr,
            CosNaming::NamingContext_var,
            CosNaming::NamingContext_out,
            TAO::Any_Insert_Policy_Stream <CosNaming::NamingContext_ptr>
          >
  {
  };

#endif /* end #if !defined */
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// ../../../ACE_wrappers/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:73

TAO_BEGIN_VERSIONED_NAMESPACE_DECL


// Arg traits specializations.
namespace TAO
{
  
  // TAO_IDL - Generated from
  // ../../../ACE_wrappers/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:620

#if !defined (_COSNAMING_NAME__ARG_TRAITS_)
#define _COSNAMING_NAME__ARG_TRAITS_
  
  template<>
  class Arg_Traits<CosNaming::Name>
    : public
        Var_Size_Arg_Traits_T<
            CosNaming::Name,
            TAO::Any_Insert_Policy_Stream <CosNaming::Name>
          >
  {
  };

#endif /* end #if !defined */
  
  // TAO_IDL - Generated from
  // ../../../ACE_wrappers/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:868

#if !defined (_COSNAMING_BINDING__ARG_TRAITS_)
#define _COSNAMING_BINDING__ARG_TRAITS_
  
  template<>
  class Arg_Traits<CosNaming::Binding>
    : public
        Var_Size_Arg_Traits_T<
            CosNaming::Binding,
            TAO::Any_Insert_Policy_Stream <CosNaming::Binding>
          >
  {
  };

#endif /* end #if !defined */
  
  // TAO_IDL - Generated from
  // ../../../ACE_wrappers/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:620

#if !defined (_COSNAMING_BINDINGLIST__ARG_TRAITS_)
#define _COSNAMING_BINDINGLIST__ARG_TRAITS_
  
  template<>
  class Arg_Traits<CosNaming::BindingList>
    : public
        Var_Size_Arg_Traits_T<
            CosNaming::BindingList,
            TAO::Any_Insert_Policy_Stream <CosNaming::BindingList>
          >
  {
  };

#endif /* end #if !defined */
  
  // TAO_IDL - Generated from
  // ../../../ACE_wrappers/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:141

#if !defined (_COSNAMING_BINDINGITERATOR__ARG_TRAITS_)
#define _COSNAMING_BINDINGITERATOR__ARG_TRAITS_
  
  template<>
  class  Arg_Traits<CosNaming::BindingIterator>
    : public
        Object_Arg_Traits_T<
            CosNaming::BindingIterator_ptr,
            CosNaming::BindingIterator_var,
            CosNaming::BindingIterator_out,
            TAO::Objref_Traits<CosNaming::BindingIterator>,
            TAO::Any_Insert_Policy_Stream <CosNaming::BindingIterator_ptr>
          >
  {
  };

#endif /* end #if !defined */
  
  // TAO_IDL - Generated from
  // ../../../ACE_wrappers/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:141

#if !defined (_COSNAMING_NAMINGCONTEXT__ARG_TRAITS_)
#define _COSNAMING_NAMINGCONTEXT__ARG_TRAITS_
  
  template<>
  class  Arg_Traits<CosNaming::NamingContext>
    : public
        Object_Arg_Traits_T<
            CosNaming::NamingContext_ptr,
            CosNaming::NamingContext_var,
            CosNaming::NamingContext_out,
            TAO::Objref_Traits<CosNaming::NamingContext>,
            TAO::Any_Insert_Policy_Stream <CosNaming::NamingContext_ptr>
          >
  {
  };

#endif /* end #if !defined */
}

TAO_END_VERSIONED_NAMESPACE_DECL



static const TAO_operation_db_entry CosNaming_NamingContext_operations [] = {
  {"bind", &POA_CosNaming::NamingContext::bind_skel, 0},
  {"rebind", &POA_CosNaming::NamingContext::rebind_skel, 0},
  {"bind_context", &POA_CosNaming::NamingContext::bind_context_skel, 0},
  {"rebind_context", &POA_CosNaming::NamingContext::rebind_context_skel, 0},
  {"resolve", &POA_CosNaming::NamingContext::resolve_skel, 0},
  {"unbind", &POA_CosNaming::NamingContext::unbind_skel, 0},
  {"new_context", &POA_CosNaming::NamingContext::new_context_skel, 0},
  {"bind_new_context", &POA_CosNaming::NamingContext::bind_new_context_skel, 0},
  {"destroy", &POA_CosNaming::NamingContext::destroy_skel, 0},
  {"list", &POA_CosNaming::NamingContext::list_skel, 0},
  {"_is_a", &POA_CosNaming::NamingContext::_is_a_skel, 0},
  {"_non_existent", &POA_CosNaming::NamingContext::_non_existent_skel, 0},
  {"_component", &POA_CosNaming::NamingContext::_component_skel, 0},
  {"_interface", &POA_CosNaming::NamingContext::_interface_skel, 0},
  {"_repository_id", &POA_CosNaming::NamingContext::_repository_id_skel, 0}
};

static const ::CORBA::Long _tao_CosNaming_NamingContext_optable_size = sizeof (ACE_Hash_Map_Entry<const char *, TAO::Operation_Skeletons>) * (45);
static char _tao_CosNaming_NamingContext_optable_pool [_tao_CosNaming_NamingContext_optable_size];
static ACE_Static_Allocator_Base _tao_CosNaming_NamingContext_allocator (_tao_CosNaming_NamingContext_optable_pool, _tao_CosNaming_NamingContext_optable_size);
static TAO_Dynamic_Hash_OpTable tao_CosNaming_NamingContext_optable (
    CosNaming_NamingContext_operations,
    15,
    30,
    &_tao_CosNaming_NamingContext_allocator
  );


// TAO_IDL - Generated from
// ../../../ACE_wrappers/TAO/TAO_IDL/be/be_visitor_interface/interface_ss.cpp:958

TAO::Collocation_Proxy_Broker *
CosNaming__TAO_NamingContext_Proxy_Broker_Factory_function ( ::CORBA::Object_ptr)
{
  return reinterpret_cast<TAO::Collocation_Proxy_Broker *> (0xdead); // Dummy
}

int
CosNaming__TAO_NamingContext_Proxy_Broker_Factory_Initializer (size_t)
{
  CosNaming__TAO_NamingContext_Proxy_Broker_Factory_function_pointer = 
    CosNaming__TAO_NamingContext_Proxy_Broker_Factory_function;
  
  return 0;
}

static int
CosNaming__TAO_NamingContext_Proxy_Broker_Stub_Factory_Initializer_Scarecrow =
  CosNaming__TAO_NamingContext_Proxy_Broker_Factory_Initializer (
      reinterpret_cast<size_t> (CosNaming__TAO_NamingContext_Proxy_Broker_Factory_Initializer)
    );

// TAO_IDL - Generated from 
// ../../../ACE_wrappers/TAO/TAO_IDL/be/be_visitor_interface/interface_ss.cpp:103

POA_CosNaming::NamingContext::NamingContext (void)
  : TAO_ServantBase ()
{
  this->optable_ = &tao_CosNaming_NamingContext_optable;
}

POA_CosNaming::NamingContext::NamingContext (const NamingContext& rhs)
  : TAO_Abstract_ServantBase (rhs),
    TAO_ServantBase (rhs)
{
}

POA_CosNaming::NamingContext::~NamingContext (void)
{
}
namespace POA_CosNaming
{
  
  
  // TAO_IDL - Generated from
  // ../../../ACE_wrappers/TAO/TAO_IDL/be/be_visitor_operation/upcall_command_ss.cpp:136
  
  class bind_NamingContext
    : public TAO::Upcall_Command
  {
  public:
    inline bind_NamingContext (
      POA_CosNaming::NamingContext * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }
    
    virtual void execute (void)
    {
      TAO::SArg_Traits< ::CosNaming::Name>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::CosNaming::Name> (
          this->operation_details_,
          this->args_,
          1);
        
      TAO::SArg_Traits< ::CORBA::Object>::in_arg_type arg_2 =
        TAO::Portable_Server::get_in_arg< ::CORBA::Object> (
          this->operation_details_,
          this->args_,
          2);
        
      this->servant_->bind (
        arg_1
        , arg_2);
    }
  
  private:
    POA_CosNaming::NamingContext * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}


// TAO_IDL - Generated from 
// ../../../ACE_wrappers/TAO/TAO_IDL/be/be_visitor_operation/operation_ss.cpp:190

void POA_CosNaming::NamingContext::bind_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const exceptions[] = 
    {
      CosNaming::NamingContext::_tc_NotFound,
      CosNaming::NamingContext::_tc_CannotProceed,
      CosNaming::NamingContext::_tc_InvalidName,
      CosNaming::NamingContext::_tc_AlreadyBound
    };
  static ::CORBA::ULong const nexceptions = 4;
#endif /* TAO_HAS_INTERCEPTORS */
  
  TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< ::CosNaming::Name>::in_arg_val _tao_n;
  TAO::SArg_Traits< ::CORBA::Object>::in_arg_val _tao_obj;
  
  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_n,
      &_tao_obj
    };
  
  static size_t const nargs = 3;
  
  POA_CosNaming::NamingContext * const impl =
    static_cast<POA_CosNaming::NamingContext *> (servant);

  bind_NamingContext command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}

namespace POA_CosNaming
{
  
  
  // TAO_IDL - Generated from
  // ../../../ACE_wrappers/TAO/TAO_IDL/be/be_visitor_operation/upcall_command_ss.cpp:136
  
  class rebind_NamingContext
    : public TAO::Upcall_Command
  {
  public:
    inline rebind_NamingContext (
      POA_CosNaming::NamingContext * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }
    
    virtual void execute (void)
    {
      TAO::SArg_Traits< ::CosNaming::Name>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::CosNaming::Name> (
          this->operation_details_,
          this->args_,
          1);
        
      TAO::SArg_Traits< ::CORBA::Object>::in_arg_type arg_2 =
        TAO::Portable_Server::get_in_arg< ::CORBA::Object> (
          this->operation_details_,
          this->args_,
          2);
        
      this->servant_->rebind (
        arg_1
        , arg_2);
    }
  
  private:
    POA_CosNaming::NamingContext * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}


// TAO_IDL - Generated from 
// ../../../ACE_wrappers/TAO/TAO_IDL/be/be_visitor_operation/operation_ss.cpp:190

void POA_CosNaming::NamingContext::rebind_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const exceptions[] = 
    {
      CosNaming::NamingContext::_tc_NotFound,
      CosNaming::NamingContext::_tc_CannotProceed,
      CosNaming::NamingContext::_tc_InvalidName
    };
  static ::CORBA::ULong const nexceptions = 3;
#endif /* TAO_HAS_INTERCEPTORS */
  
  TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< ::CosNaming::Name>::in_arg_val _tao_n;
  TAO::SArg_Traits< ::CORBA::Object>::in_arg_val _tao_obj;
  
  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_n,
      &_tao_obj
    };
  
  static size_t const nargs = 3;
  
  POA_CosNaming::NamingContext * const impl =
    static_cast<POA_CosNaming::NamingContext *> (servant);

  rebind_NamingContext command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}

namespace POA_CosNaming
{
  
  
  // TAO_IDL - Generated from
  // ../../../ACE_wrappers/TAO/TAO_IDL/be/be_visitor_operation/upcall_command_ss.cpp:136
  
  class bind_context_NamingContext
    : public TAO::Upcall_Command
  {
  public:
    inline bind_context_NamingContext (
      POA_CosNaming::NamingContext * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }
    
    virtual void execute (void)
    {
      TAO::SArg_Traits< ::CosNaming::Name>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::CosNaming::Name> (
          this->operation_details_,
          this->args_,
          1);
        
      TAO::SArg_Traits< ::CosNaming::NamingContext>::in_arg_type arg_2 =
        TAO::Portable_Server::get_in_arg< ::CosNaming::NamingContext> (
          this->operation_details_,
          this->args_,
          2);
        
      this->servant_->bind_context (
        arg_1
        , arg_2);
    }
  
  private:
    POA_CosNaming::NamingContext * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}


// TAO_IDL - Generated from 
// ../../../ACE_wrappers/TAO/TAO_IDL/be/be_visitor_operation/operation_ss.cpp:190

void POA_CosNaming::NamingContext::bind_context_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const exceptions[] = 
    {
      CosNaming::NamingContext::_tc_NotFound,
      CosNaming::NamingContext::_tc_CannotProceed,
      CosNaming::NamingContext::_tc_InvalidName,
      CosNaming::NamingContext::_tc_AlreadyBound
    };
  static ::CORBA::ULong const nexceptions = 4;
#endif /* TAO_HAS_INTERCEPTORS */
  
  TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< ::CosNaming::Name>::in_arg_val _tao_n;
  TAO::SArg_Traits< ::CosNaming::NamingContext>::in_arg_val _tao_nc;
  
  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_n,
      &_tao_nc
    };
  
  static size_t const nargs = 3;
  
  POA_CosNaming::NamingContext * const impl =
    static_cast<POA_CosNaming::NamingContext *> (servant);

  bind_context_NamingContext command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}

namespace POA_CosNaming
{
  
  
  // TAO_IDL - Generated from
  // ../../../ACE_wrappers/TAO/TAO_IDL/be/be_visitor_operation/upcall_command_ss.cpp:136
  
  class rebind_context_NamingContext
    : public TAO::Upcall_Command
  {
  public:
    inline rebind_context_NamingContext (
      POA_CosNaming::NamingContext * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }
    
    virtual void execute (void)
    {
      TAO::SArg_Traits< ::CosNaming::Name>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::CosNaming::Name> (
          this->operation_details_,
          this->args_,
          1);
        
      TAO::SArg_Traits< ::CosNaming::NamingContext>::in_arg_type arg_2 =
        TAO::Portable_Server::get_in_arg< ::CosNaming::NamingContext> (
          this->operation_details_,
          this->args_,
          2);
        
      this->servant_->rebind_context (
        arg_1
        , arg_2);
    }
  
  private:
    POA_CosNaming::NamingContext * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}


// TAO_IDL - Generated from 
// ../../../ACE_wrappers/TAO/TAO_IDL/be/be_visitor_operation/operation_ss.cpp:190

void POA_CosNaming::NamingContext::rebind_context_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const exceptions[] = 
    {
      CosNaming::NamingContext::_tc_NotFound,
      CosNaming::NamingContext::_tc_CannotProceed,
      CosNaming::NamingContext::_tc_InvalidName
    };
  static ::CORBA::ULong const nexceptions = 3;
#endif /* TAO_HAS_INTERCEPTORS */
  
  TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< ::CosNaming::Name>::in_arg_val _tao_n;
  TAO::SArg_Traits< ::CosNaming::NamingContext>::in_arg_val _tao_nc;
  
  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_n,
      &_tao_nc
    };
  
  static size_t const nargs = 3;
  
  POA_CosNaming::NamingContext * const impl =
    static_cast<POA_CosNaming::NamingContext *> (servant);

  rebind_context_NamingContext command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}

namespace POA_CosNaming
{
  
  
  // TAO_IDL - Generated from
  // ../../../ACE_wrappers/TAO/TAO_IDL/be/be_visitor_operation/upcall_command_ss.cpp:136
  
  class resolve_NamingContext
    : public TAO::Upcall_Command
  {
  public:
    inline resolve_NamingContext (
      POA_CosNaming::NamingContext * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }
    
    virtual void execute (void)
    {
      TAO::SArg_Traits< ::CORBA::Object>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::CORBA::Object> (
          this->operation_details_,
          this->args_);
      
      TAO::SArg_Traits< ::CosNaming::Name>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::CosNaming::Name> (
          this->operation_details_,
          this->args_,
          1);
        
      retval =
        this->servant_->resolve (
          arg_1);
    }
  
  private:
    POA_CosNaming::NamingContext * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}


// TAO_IDL - Generated from 
// ../../../ACE_wrappers/TAO/TAO_IDL/be/be_visitor_operation/operation_ss.cpp:190

void POA_CosNaming::NamingContext::resolve_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const exceptions[] = 
    {
      CosNaming::NamingContext::_tc_NotFound,
      CosNaming::NamingContext::_tc_CannotProceed,
      CosNaming::NamingContext::_tc_InvalidName
    };
  static ::CORBA::ULong const nexceptions = 3;
#endif /* TAO_HAS_INTERCEPTORS */
  
  TAO::SArg_Traits< ::CORBA::Object>::ret_val retval;
  TAO::SArg_Traits< ::CosNaming::Name>::in_arg_val _tao_n;
  
  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_n
    };
  
  static size_t const nargs = 2;
  
  POA_CosNaming::NamingContext * const impl =
    static_cast<POA_CosNaming::NamingContext *> (servant);

  resolve_NamingContext command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}

namespace POA_CosNaming
{
  
  
  // TAO_IDL - Generated from
  // ../../../ACE_wrappers/TAO/TAO_IDL/be/be_visitor_operation/upcall_command_ss.cpp:136
  
  class unbind_NamingContext
    : public TAO::Upcall_Command
  {
  public:
    inline unbind_NamingContext (
      POA_CosNaming::NamingContext * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }
    
    virtual void execute (void)
    {
      TAO::SArg_Traits< ::CosNaming::Name>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::CosNaming::Name> (
          this->operation_details_,
          this->args_,
          1);
        
      this->servant_->unbind (
        arg_1);
    }
  
  private:
    POA_CosNaming::NamingContext * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}


// TAO_IDL - Generated from 
// ../../../ACE_wrappers/TAO/TAO_IDL/be/be_visitor_operation/operation_ss.cpp:190

void POA_CosNaming::NamingContext::unbind_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const exceptions[] = 
    {
      CosNaming::NamingContext::_tc_NotFound,
      CosNaming::NamingContext::_tc_CannotProceed,
      CosNaming::NamingContext::_tc_InvalidName
    };
  static ::CORBA::ULong const nexceptions = 3;
#endif /* TAO_HAS_INTERCEPTORS */
  
  TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< ::CosNaming::Name>::in_arg_val _tao_n;
  
  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_n
    };
  
  static size_t const nargs = 2;
  
  POA_CosNaming::NamingContext * const impl =
    static_cast<POA_CosNaming::NamingContext *> (servant);

  unbind_NamingContext command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}

namespace POA_CosNaming
{
  
  
  // TAO_IDL - Generated from
  // ../../../ACE_wrappers/TAO/TAO_IDL/be/be_visitor_operation/upcall_command_ss.cpp:136
  
  class new_context_NamingContext
    : public TAO::Upcall_Command
  {
  public:
    inline new_context_NamingContext (
      POA_CosNaming::NamingContext * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }
    
    virtual void execute (void)
    {
      TAO::SArg_Traits< ::CosNaming::NamingContext>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::CosNaming::NamingContext> (
          this->operation_details_,
          this->args_);
      
      retval =
        this->servant_->new_context ();
    }
  
  private:
    POA_CosNaming::NamingContext * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}


// TAO_IDL - Generated from 
// ../../../ACE_wrappers/TAO/TAO_IDL/be/be_visitor_operation/operation_ss.cpp:190

void POA_CosNaming::NamingContext::new_context_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */
  
  TAO::SArg_Traits< ::CosNaming::NamingContext>::ret_val retval;
  
  TAO::Argument * const args[] =
    {
      &retval
    };
  
  static size_t const nargs = 1;
  
  POA_CosNaming::NamingContext * const impl =
    static_cast<POA_CosNaming::NamingContext *> (servant);

  new_context_NamingContext command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}

namespace POA_CosNaming
{
  
  
  // TAO_IDL - Generated from
  // ../../../ACE_wrappers/TAO/TAO_IDL/be/be_visitor_operation/upcall_command_ss.cpp:136
  
  class bind_new_context_NamingContext
    : public TAO::Upcall_Command
  {
  public:
    inline bind_new_context_NamingContext (
      POA_CosNaming::NamingContext * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }
    
    virtual void execute (void)
    {
      TAO::SArg_Traits< ::CosNaming::NamingContext>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::CosNaming::NamingContext> (
          this->operation_details_,
          this->args_);
      
      TAO::SArg_Traits< ::CosNaming::Name>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::CosNaming::Name> (
          this->operation_details_,
          this->args_,
          1);
        
      retval =
        this->servant_->bind_new_context (
          arg_1);
    }
  
  private:
    POA_CosNaming::NamingContext * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}


// TAO_IDL - Generated from 
// ../../../ACE_wrappers/TAO/TAO_IDL/be/be_visitor_operation/operation_ss.cpp:190

void POA_CosNaming::NamingContext::bind_new_context_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const exceptions[] = 
    {
      CosNaming::NamingContext::_tc_NotFound,
      CosNaming::NamingContext::_tc_AlreadyBound,
      CosNaming::NamingContext::_tc_CannotProceed,
      CosNaming::NamingContext::_tc_InvalidName
    };
  static ::CORBA::ULong const nexceptions = 4;
#endif /* TAO_HAS_INTERCEPTORS */
  
  TAO::SArg_Traits< ::CosNaming::NamingContext>::ret_val retval;
  TAO::SArg_Traits< ::CosNaming::Name>::in_arg_val _tao_n;
  
  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_n
    };
  
  static size_t const nargs = 2;
  
  POA_CosNaming::NamingContext * const impl =
    static_cast<POA_CosNaming::NamingContext *> (servant);

  bind_new_context_NamingContext command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}

namespace POA_CosNaming
{
  
  
  // TAO_IDL - Generated from
  // ../../../ACE_wrappers/TAO/TAO_IDL/be/be_visitor_operation/upcall_command_ss.cpp:136
  
  class destroy_NamingContext
    : public TAO::Upcall_Command
  {
  public:
    inline destroy_NamingContext (
      POA_CosNaming::NamingContext * servant)
      : servant_ (servant)
    {
    }
    
    virtual void execute (void)
    {
      this->servant_->destroy ();
    }
  
  private:
    POA_CosNaming::NamingContext * const servant_;
  };
}


// TAO_IDL - Generated from 
// ../../../ACE_wrappers/TAO/TAO_IDL/be/be_visitor_operation/operation_ss.cpp:190

void POA_CosNaming::NamingContext::destroy_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const exceptions[] = 
    {
      CosNaming::NamingContext::_tc_NotEmpty
    };
  static ::CORBA::ULong const nexceptions = 1;
#endif /* TAO_HAS_INTERCEPTORS */
  
  TAO::SArg_Traits< void>::ret_val retval;
  
  TAO::Argument * const args[] =
    {
      &retval
    };
  
  static size_t const nargs = 1;
  
  POA_CosNaming::NamingContext * const impl =
    static_cast<POA_CosNaming::NamingContext *> (servant);

  destroy_NamingContext command (
    impl);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}

namespace POA_CosNaming
{
  
  
  // TAO_IDL - Generated from
  // ../../../ACE_wrappers/TAO/TAO_IDL/be/be_visitor_operation/upcall_command_ss.cpp:136
  
  class list_NamingContext
    : public TAO::Upcall_Command
  {
  public:
    inline list_NamingContext (
      POA_CosNaming::NamingContext * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }
    
    virtual void execute (void)
    {
      TAO::SArg_Traits< ::CORBA::ULong>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::CORBA::ULong> (
          this->operation_details_,
          this->args_,
          1);
        
      TAO::SArg_Traits< ::CosNaming::BindingList>::out_arg_type arg_2 =
        TAO::Portable_Server::get_out_arg< ::CosNaming::BindingList> (
          this->operation_details_,
          this->args_,
          2);
        
      TAO::SArg_Traits< ::CosNaming::BindingIterator>::out_arg_type arg_3 =
        TAO::Portable_Server::get_out_arg< ::CosNaming::BindingIterator> (
          this->operation_details_,
          this->args_,
          3);
        
      this->servant_->list (
        arg_1
        , arg_2
        , arg_3);
    }
  
  private:
    POA_CosNaming::NamingContext * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}


// TAO_IDL - Generated from 
// ../../../ACE_wrappers/TAO/TAO_IDL/be/be_visitor_operation/operation_ss.cpp:190

void POA_CosNaming::NamingContext::list_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */
  
  TAO::SArg_Traits< void>::ret_val retval;
  TAO::SArg_Traits< ::CORBA::ULong>::in_arg_val _tao_how_many;
  TAO::SArg_Traits< ::CosNaming::BindingList>::out_arg_val _tao_bl;
  TAO::SArg_Traits< ::CosNaming::BindingIterator>::out_arg_val _tao_bi;
  
  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_how_many,
      &_tao_bl,
      &_tao_bi
    };
  
  static size_t const nargs = 4;
  
  POA_CosNaming::NamingContext * const impl =
    static_cast<POA_CosNaming::NamingContext *> (servant);

  list_NamingContext command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}



// TAO_IDL - Generated from 
// ../../../ACE_wrappers/TAO/TAO_IDL/be/be_visitor_interface/interface_ss.cpp:169

namespace POA_CosNaming
{
  
  
  // TAO_IDL - Generated from
  // ../../../ACE_wrappers/TAO/TAO_IDL/be/be_visitor_operation/upcall_command_ss.cpp:136
  
  class _is_a_NamingContext_Upcall_Command
    : public TAO::Upcall_Command
  {
  public:
    inline _is_a_NamingContext_Upcall_Command (
      POA_CosNaming::NamingContext * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }
    
    virtual void execute (void)
    {
      TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::ACE_InputCDR::to_boolean> (
          this->operation_details_,
          this->args_);
      
      TAO::SArg_Traits< ::CORBA::Char *>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::CORBA::Char *> (
          this->operation_details_,
          this->args_,
          1);
        
      retval =
        this->servant_-> _is_a (
          arg_1);
    }
  
  private:
    POA_CosNaming::NamingContext * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}


void POA_CosNaming::NamingContext::_is_a_skel (
    TAO_ServerRequest & server_request, 
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */
  
  TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::ret_val retval;
  TAO::SArg_Traits< ::CORBA::Char *>::in_arg_val _tao_repository_id;
  
  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_repository_id
    };
  
  static size_t const nargs = 2;
  
  POA_CosNaming::NamingContext * const impl =
    static_cast<POA_CosNaming::NamingContext *> (servant);
  
  _is_a_NamingContext_Upcall_Command command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}

namespace POA_CosNaming
{
  
  
  // TAO_IDL - Generated from
  // ../../../ACE_wrappers/TAO/TAO_IDL/be/be_visitor_operation/upcall_command_ss.cpp:136
  
  class _non_existent_NamingContext_Upcall_Command
    : public TAO::Upcall_Command
  {
  public:
    inline _non_existent_NamingContext_Upcall_Command (
      POA_CosNaming::NamingContext * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }
    
    virtual void execute (void)
    {
      TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::ACE_InputCDR::to_boolean> (
          this->operation_details_,
          this->args_);
      
      retval =
        this->servant_-> _non_existent ();
    }
  
  private:
    POA_CosNaming::NamingContext * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}


void POA_CosNaming::NamingContext::_non_existent_skel (
    TAO_ServerRequest & server_request, 
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */
  
  TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::ret_val retval;
  
  TAO::Argument * const args[] =
    {
      &retval
    };
  
  static size_t const nargs = 1;
  
  POA_CosNaming::NamingContext * const impl =
    static_cast<POA_CosNaming::NamingContext *> (servant);
  
  _non_existent_NamingContext_Upcall_Command command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}
namespace POA_CosNaming
{
  
  
  // TAO_IDL - Generated from
  // ../../../ACE_wrappers/TAO/TAO_IDL/be/be_visitor_operation/upcall_command_ss.cpp:136
  
  class _repository_id_NamingContext_Upcall_Command
    : public TAO::Upcall_Command
  {
  public:
    inline _repository_id_NamingContext_Upcall_Command (
      POA_CosNaming::NamingContext * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }
    
    virtual void execute (void)
    {
      TAO::SArg_Traits< ::CORBA::Char *>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::CORBA::Char *> (
          this->operation_details_,
          this->args_);
      
      retval =
        this->servant_-> _repository_id ();
    }
  
  private:
    POA_CosNaming::NamingContext * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}


void POA_CosNaming::NamingContext::_repository_id_skel (
    TAO_ServerRequest & server_request, 
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */
  
  TAO::SArg_Traits< ::CORBA::Char *>::ret_val retval;
  
  TAO::Argument * const args[] =
    {
      &retval
    };
  
  static size_t const nargs = 1;
  
  POA_CosNaming::NamingContext * const impl =
    static_cast<POA_CosNaming::NamingContext *> (servant);
  
  _repository_id_NamingContext_Upcall_Command command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}

// TAO_IDL - Generated from 
// ../../../ACE_wrappers/TAO/TAO_IDL/be/be_visitor_interface/interface_ss.cpp:508

void POA_CosNaming::NamingContext::_interface_skel (
    TAO_ServerRequest & server_request, 
    void * /* servant_upcall */,
    void * servant)
{
  TAO_IFR_Client_Adapter *_tao_adapter =
    ACE_Dynamic_Service<TAO_IFR_Client_Adapter>::instance (
        TAO_ORB_Core::ifr_client_adapter_name ()
      );
    
  if (_tao_adapter == 0)
    {
      throw ::CORBA::INTF_REPOS (::CORBA::OMGVMCID | 1, ::CORBA::COMPLETED_NO);
    }
  
  POA_CosNaming::NamingContext * const impl =
    static_cast<POA_CosNaming::NamingContext *> (servant);
  ::CORBA::InterfaceDef_ptr _tao_retval = impl->_get_interface ();
  server_request.init_reply ();
  TAO_OutputCDR &_tao_out = *server_request.outgoing ();
  
  ::CORBA::Boolean const _tao_result =
    _tao_adapter->interfacedef_cdr_insert (_tao_out, _tao_retval);
  
  _tao_adapter->dispose (_tao_retval);
  
  if (_tao_result == false)
    {
      throw ::CORBA::MARSHAL ();
    }
}

namespace POA_CosNaming
{
  
  
  // TAO_IDL - Generated from
  // ../../../ACE_wrappers/TAO/TAO_IDL/be/be_visitor_operation/upcall_command_ss.cpp:136
  
  class _get_component_NamingContext_Upcall_Command
    : public TAO::Upcall_Command
  {
  public:
    inline _get_component_NamingContext_Upcall_Command (
      POA_CosNaming::NamingContext * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }
    
    virtual void execute (void)
    {
      TAO::SArg_Traits< ::CORBA::Object>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::CORBA::Object> (
          this->operation_details_,
          this->args_);
      
      retval =
        this->servant_-> _get_component ();
    }
  
  private:
    POA_CosNaming::NamingContext * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}


void POA_CosNaming::NamingContext::_component_skel (
    TAO_ServerRequest & server_request, 
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant
  )
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */
  
  TAO::SArg_Traits< ::CORBA::Object>::ret_val retval;
  
  TAO::Argument * const args[] =
    {
      &retval
    };
  
  static size_t const nargs = 1;
  
  POA_CosNaming::NamingContext * const impl =
    static_cast<POA_CosNaming::NamingContext *> (servant);
  
  _get_component_NamingContext_Upcall_Command command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}

::CORBA::Boolean POA_CosNaming::NamingContext::_is_a (const char* value)
{
  return
    (
      !ACE_OS::strcmp (
          value,
          "IDL:omg.org/CosNaming/NamingContext:1.0"
        ) ||
      !ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        )
    );
}

const char* POA_CosNaming::NamingContext::_interface_repository_id (void) const
{
  return "IDL:omg.org/CosNaming/NamingContext:1.0";
}

// TAO_IDL - Generated from
// ../../../ACE_wrappers/TAO/TAO_IDL/be/be_visitor_interface/interface_ss.cpp:902

void POA_CosNaming::NamingContext::_dispatch (TAO_ServerRequest & req, void * servant_upcall)
{
  this->synchronous_upcall_dispatch (req, servant_upcall, this);
}

// TAO_IDL - Generated from
// ../../../ACE_wrappers/TAO/TAO_IDL/be/be_visitor_interface/interface_ss.cpp:852

CosNaming::NamingContext *
POA_CosNaming::NamingContext::_this (void)
{
  TAO_Stub *stub = this->_create_stub ();
  
  TAO_Stub_Auto_Ptr safe_stub (stub);
  ::CORBA::Object_ptr tmp = CORBA::Object_ptr ();
  
  ::CORBA::Boolean const _tao_opt_colloc =
    stub->servant_orb_var ()->orb_core ()->optimize_collocation_objects ();
  
  ACE_NEW_RETURN (
      tmp,
      ::CORBA::Object (stub, _tao_opt_colloc, this),
      0
    );
  
  ::CORBA::Object_var obj = tmp;
  (void) safe_stub.release ();
  
  typedef ::CosNaming::NamingContext STUB_SCOPED_NAME;
  return
    TAO::Narrow_Utils<STUB_SCOPED_NAME>::unchecked_narrow (
        obj.in (),
        CosNaming__TAO_NamingContext_Proxy_Broker_Factory_function_pointer
      );
}

static const TAO_operation_db_entry CosNaming_BindingIterator_operations [] = {
  {"next_one", &POA_CosNaming::BindingIterator::next_one_skel, 0},
  {"next_n", &POA_CosNaming::BindingIterator::next_n_skel, 0},
  {"destroy", &POA_CosNaming::BindingIterator::destroy_skel, 0},
  {"_is_a", &POA_CosNaming::BindingIterator::_is_a_skel, 0},
  {"_non_existent", &POA_CosNaming::BindingIterator::_non_existent_skel, 0},
  {"_component", &POA_CosNaming::BindingIterator::_component_skel, 0},
  {"_interface", &POA_CosNaming::BindingIterator::_interface_skel, 0},
  {"_repository_id", &POA_CosNaming::BindingIterator::_repository_id_skel, 0}
};

static const ::CORBA::Long _tao_CosNaming_BindingIterator_optable_size = sizeof (ACE_Hash_Map_Entry<const char *, TAO::Operation_Skeletons>) * (24);
static char _tao_CosNaming_BindingIterator_optable_pool [_tao_CosNaming_BindingIterator_optable_size];
static ACE_Static_Allocator_Base _tao_CosNaming_BindingIterator_allocator (_tao_CosNaming_BindingIterator_optable_pool, _tao_CosNaming_BindingIterator_optable_size);
static TAO_Dynamic_Hash_OpTable tao_CosNaming_BindingIterator_optable (
    CosNaming_BindingIterator_operations,
    8,
    16,
    &_tao_CosNaming_BindingIterator_allocator
  );


// TAO_IDL - Generated from
// ../../../ACE_wrappers/TAO/TAO_IDL/be/be_visitor_interface/interface_ss.cpp:958

TAO::Collocation_Proxy_Broker *
CosNaming__TAO_BindingIterator_Proxy_Broker_Factory_function ( ::CORBA::Object_ptr)
{
  return reinterpret_cast<TAO::Collocation_Proxy_Broker *> (0xdead); // Dummy
}

int
CosNaming__TAO_BindingIterator_Proxy_Broker_Factory_Initializer (size_t)
{
  CosNaming__TAO_BindingIterator_Proxy_Broker_Factory_function_pointer = 
    CosNaming__TAO_BindingIterator_Proxy_Broker_Factory_function;
  
  return 0;
}

static int
CosNaming__TAO_BindingIterator_Proxy_Broker_Stub_Factory_Initializer_Scarecrow =
  CosNaming__TAO_BindingIterator_Proxy_Broker_Factory_Initializer (
      reinterpret_cast<size_t> (CosNaming__TAO_BindingIterator_Proxy_Broker_Factory_Initializer)
    );

// TAO_IDL - Generated from 
// ../../../ACE_wrappers/TAO/TAO_IDL/be/be_visitor_interface/interface_ss.cpp:103

POA_CosNaming::BindingIterator::BindingIterator (void)
  : TAO_ServantBase ()
{
  this->optable_ = &tao_CosNaming_BindingIterator_optable;
}

POA_CosNaming::BindingIterator::BindingIterator (const BindingIterator& rhs)
  : TAO_Abstract_ServantBase (rhs),
    TAO_ServantBase (rhs)
{
}

POA_CosNaming::BindingIterator::~BindingIterator (void)
{
}
namespace POA_CosNaming
{
  
  
  // TAO_IDL - Generated from
  // ../../../ACE_wrappers/TAO/TAO_IDL/be/be_visitor_operation/upcall_command_ss.cpp:136
  
  class next_one_BindingIterator
    : public TAO::Upcall_Command
  {
  public:
    inline next_one_BindingIterator (
      POA_CosNaming::BindingIterator * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }
    
    virtual void execute (void)
    {
      TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::ACE_InputCDR::to_boolean> (
          this->operation_details_,
          this->args_);
      
      TAO::SArg_Traits< ::CosNaming::Binding>::out_arg_type arg_1 =
        TAO::Portable_Server::get_out_arg< ::CosNaming::Binding> (
          this->operation_details_,
          this->args_,
          1);
        
      retval =
        this->servant_->next_one (
          arg_1);
    }
  
  private:
    POA_CosNaming::BindingIterator * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}


// TAO_IDL - Generated from 
// ../../../ACE_wrappers/TAO/TAO_IDL/be/be_visitor_operation/operation_ss.cpp:190

void POA_CosNaming::BindingIterator::next_one_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */
  
  TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::ret_val retval;
  TAO::SArg_Traits< ::CosNaming::Binding>::out_arg_val _tao_b;
  
  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_b
    };
  
  static size_t const nargs = 2;
  
  POA_CosNaming::BindingIterator * const impl =
    static_cast<POA_CosNaming::BindingIterator *> (servant);

  next_one_BindingIterator command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}

namespace POA_CosNaming
{
  
  
  // TAO_IDL - Generated from
  // ../../../ACE_wrappers/TAO/TAO_IDL/be/be_visitor_operation/upcall_command_ss.cpp:136
  
  class next_n_BindingIterator
    : public TAO::Upcall_Command
  {
  public:
    inline next_n_BindingIterator (
      POA_CosNaming::BindingIterator * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }
    
    virtual void execute (void)
    {
      TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::ACE_InputCDR::to_boolean> (
          this->operation_details_,
          this->args_);
      
      TAO::SArg_Traits< ::CORBA::ULong>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::CORBA::ULong> (
          this->operation_details_,
          this->args_,
          1);
        
      TAO::SArg_Traits< ::CosNaming::BindingList>::out_arg_type arg_2 =
        TAO::Portable_Server::get_out_arg< ::CosNaming::BindingList> (
          this->operation_details_,
          this->args_,
          2);
        
      retval =
        this->servant_->next_n (
          arg_1
          , arg_2);
    }
  
  private:
    POA_CosNaming::BindingIterator * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}


// TAO_IDL - Generated from 
// ../../../ACE_wrappers/TAO/TAO_IDL/be/be_visitor_operation/operation_ss.cpp:190

void POA_CosNaming::BindingIterator::next_n_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */
  
  TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::ret_val retval;
  TAO::SArg_Traits< ::CORBA::ULong>::in_arg_val _tao_how_many;
  TAO::SArg_Traits< ::CosNaming::BindingList>::out_arg_val _tao_bl;
  
  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_how_many,
      &_tao_bl
    };
  
  static size_t const nargs = 3;
  
  POA_CosNaming::BindingIterator * const impl =
    static_cast<POA_CosNaming::BindingIterator *> (servant);

  next_n_BindingIterator command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}

namespace POA_CosNaming
{
  
  
  // TAO_IDL - Generated from
  // ../../../ACE_wrappers/TAO/TAO_IDL/be/be_visitor_operation/upcall_command_ss.cpp:136
  
  class destroy_BindingIterator
    : public TAO::Upcall_Command
  {
  public:
    inline destroy_BindingIterator (
      POA_CosNaming::BindingIterator * servant)
      : servant_ (servant)
    {
    }
    
    virtual void execute (void)
    {
      this->servant_->destroy ();
    }
  
  private:
    POA_CosNaming::BindingIterator * const servant_;
  };
}


// TAO_IDL - Generated from 
// ../../../ACE_wrappers/TAO/TAO_IDL/be/be_visitor_operation/operation_ss.cpp:190

void POA_CosNaming::BindingIterator::destroy_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */
  
  TAO::SArg_Traits< void>::ret_val retval;
  
  TAO::Argument * const args[] =
    {
      &retval
    };
  
  static size_t const nargs = 1;
  
  POA_CosNaming::BindingIterator * const impl =
    static_cast<POA_CosNaming::BindingIterator *> (servant);

  destroy_BindingIterator command (
    impl);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}



// TAO_IDL - Generated from 
// ../../../ACE_wrappers/TAO/TAO_IDL/be/be_visitor_interface/interface_ss.cpp:169

namespace POA_CosNaming
{
  
  
  // TAO_IDL - Generated from
  // ../../../ACE_wrappers/TAO/TAO_IDL/be/be_visitor_operation/upcall_command_ss.cpp:136
  
  class _is_a_BindingIterator_Upcall_Command
    : public TAO::Upcall_Command
  {
  public:
    inline _is_a_BindingIterator_Upcall_Command (
      POA_CosNaming::BindingIterator * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }
    
    virtual void execute (void)
    {
      TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::ACE_InputCDR::to_boolean> (
          this->operation_details_,
          this->args_);
      
      TAO::SArg_Traits< ::CORBA::Char *>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::CORBA::Char *> (
          this->operation_details_,
          this->args_,
          1);
        
      retval =
        this->servant_-> _is_a (
          arg_1);
    }
  
  private:
    POA_CosNaming::BindingIterator * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}


void POA_CosNaming::BindingIterator::_is_a_skel (
    TAO_ServerRequest & server_request, 
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */
  
  TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::ret_val retval;
  TAO::SArg_Traits< ::CORBA::Char *>::in_arg_val _tao_repository_id;
  
  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_repository_id
    };
  
  static size_t const nargs = 2;
  
  POA_CosNaming::BindingIterator * const impl =
    static_cast<POA_CosNaming::BindingIterator *> (servant);
  
  _is_a_BindingIterator_Upcall_Command command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}

namespace POA_CosNaming
{
  
  
  // TAO_IDL - Generated from
  // ../../../ACE_wrappers/TAO/TAO_IDL/be/be_visitor_operation/upcall_command_ss.cpp:136
  
  class _non_existent_BindingIterator_Upcall_Command
    : public TAO::Upcall_Command
  {
  public:
    inline _non_existent_BindingIterator_Upcall_Command (
      POA_CosNaming::BindingIterator * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }
    
    virtual void execute (void)
    {
      TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::ACE_InputCDR::to_boolean> (
          this->operation_details_,
          this->args_);
      
      retval =
        this->servant_-> _non_existent ();
    }
  
  private:
    POA_CosNaming::BindingIterator * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}


void POA_CosNaming::BindingIterator::_non_existent_skel (
    TAO_ServerRequest & server_request, 
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */
  
  TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::ret_val retval;
  
  TAO::Argument * const args[] =
    {
      &retval
    };
  
  static size_t const nargs = 1;
  
  POA_CosNaming::BindingIterator * const impl =
    static_cast<POA_CosNaming::BindingIterator *> (servant);
  
  _non_existent_BindingIterator_Upcall_Command command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}
namespace POA_CosNaming
{
  
  
  // TAO_IDL - Generated from
  // ../../../ACE_wrappers/TAO/TAO_IDL/be/be_visitor_operation/upcall_command_ss.cpp:136
  
  class _repository_id_BindingIterator_Upcall_Command
    : public TAO::Upcall_Command
  {
  public:
    inline _repository_id_BindingIterator_Upcall_Command (
      POA_CosNaming::BindingIterator * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }
    
    virtual void execute (void)
    {
      TAO::SArg_Traits< ::CORBA::Char *>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::CORBA::Char *> (
          this->operation_details_,
          this->args_);
      
      retval =
        this->servant_-> _repository_id ();
    }
  
  private:
    POA_CosNaming::BindingIterator * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}


void POA_CosNaming::BindingIterator::_repository_id_skel (
    TAO_ServerRequest & server_request, 
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */
  
  TAO::SArg_Traits< ::CORBA::Char *>::ret_val retval;
  
  TAO::Argument * const args[] =
    {
      &retval
    };
  
  static size_t const nargs = 1;
  
  POA_CosNaming::BindingIterator * const impl =
    static_cast<POA_CosNaming::BindingIterator *> (servant);
  
  _repository_id_BindingIterator_Upcall_Command command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}

// TAO_IDL - Generated from 
// ../../../ACE_wrappers/TAO/TAO_IDL/be/be_visitor_interface/interface_ss.cpp:508

void POA_CosNaming::BindingIterator::_interface_skel (
    TAO_ServerRequest & server_request, 
    void * /* servant_upcall */,
    void * servant)
{
  TAO_IFR_Client_Adapter *_tao_adapter =
    ACE_Dynamic_Service<TAO_IFR_Client_Adapter>::instance (
        TAO_ORB_Core::ifr_client_adapter_name ()
      );
    
  if (_tao_adapter == 0)
    {
      throw ::CORBA::INTF_REPOS (::CORBA::OMGVMCID | 1, ::CORBA::COMPLETED_NO);
    }
  
  POA_CosNaming::BindingIterator * const impl =
    static_cast<POA_CosNaming::BindingIterator *> (servant);
  ::CORBA::InterfaceDef_ptr _tao_retval = impl->_get_interface ();
  server_request.init_reply ();
  TAO_OutputCDR &_tao_out = *server_request.outgoing ();
  
  ::CORBA::Boolean const _tao_result =
    _tao_adapter->interfacedef_cdr_insert (_tao_out, _tao_retval);
  
  _tao_adapter->dispose (_tao_retval);
  
  if (_tao_result == false)
    {
      throw ::CORBA::MARSHAL ();
    }
}

namespace POA_CosNaming
{
  
  
  // TAO_IDL - Generated from
  // ../../../ACE_wrappers/TAO/TAO_IDL/be/be_visitor_operation/upcall_command_ss.cpp:136
  
  class _get_component_BindingIterator_Upcall_Command
    : public TAO::Upcall_Command
  {
  public:
    inline _get_component_BindingIterator_Upcall_Command (
      POA_CosNaming::BindingIterator * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }
    
    virtual void execute (void)
    {
      TAO::SArg_Traits< ::CORBA::Object>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::CORBA::Object> (
          this->operation_details_,
          this->args_);
      
      retval =
        this->servant_-> _get_component ();
    }
  
  private:
    POA_CosNaming::BindingIterator * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}


void POA_CosNaming::BindingIterator::_component_skel (
    TAO_ServerRequest & server_request, 
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant
  )
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */
  
  TAO::SArg_Traits< ::CORBA::Object>::ret_val retval;
  
  TAO::Argument * const args[] =
    {
      &retval
    };
  
  static size_t const nargs = 1;
  
  POA_CosNaming::BindingIterator * const impl =
    static_cast<POA_CosNaming::BindingIterator *> (servant);
  
  _get_component_BindingIterator_Upcall_Command command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}

::CORBA::Boolean POA_CosNaming::BindingIterator::_is_a (const char* value)
{
  return
    (
      !ACE_OS::strcmp (
          value,
          "IDL:omg.org/CosNaming/BindingIterator:1.0"
        ) ||
      !ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        )
    );
}

const char* POA_CosNaming::BindingIterator::_interface_repository_id (void) const
{
  return "IDL:omg.org/CosNaming/BindingIterator:1.0";
}

// TAO_IDL - Generated from
// ../../../ACE_wrappers/TAO/TAO_IDL/be/be_visitor_interface/interface_ss.cpp:902

void POA_CosNaming::BindingIterator::_dispatch (TAO_ServerRequest & req, void * servant_upcall)
{
  this->synchronous_upcall_dispatch (req, servant_upcall, this);
}

// TAO_IDL - Generated from
// ../../../ACE_wrappers/TAO/TAO_IDL/be/be_visitor_interface/interface_ss.cpp:852

CosNaming::BindingIterator *
POA_CosNaming::BindingIterator::_this (void)
{
  TAO_Stub *stub = this->_create_stub ();
  
  TAO_Stub_Auto_Ptr safe_stub (stub);
  ::CORBA::Object_ptr tmp = CORBA::Object_ptr ();
  
  ::CORBA::Boolean const _tao_opt_colloc =
    stub->servant_orb_var ()->orb_core ()->optimize_collocation_objects ();
  
  ACE_NEW_RETURN (
      tmp,
      ::CORBA::Object (stub, _tao_opt_colloc, this),
      0
    );
  
  ::CORBA::Object_var obj = tmp;
  (void) safe_stub.release ();
  
  typedef ::CosNaming::BindingIterator STUB_SCOPED_NAME;
  return
    TAO::Narrow_Utils<STUB_SCOPED_NAME>::unchecked_narrow (
        obj.in (),
        CosNaming__TAO_BindingIterator_Proxy_Broker_Factory_function_pointer
      );
}

static const TAO_operation_db_entry CosNaming_NamingContextExt_operations [] = {
  {"bind", &POA_CosNaming::NamingContextExt::bind_skel, 0},
  {"rebind", &POA_CosNaming::NamingContextExt::rebind_skel, 0},
  {"bind_context", &POA_CosNaming::NamingContextExt::bind_context_skel, 0},
  {"rebind_context", &POA_CosNaming::NamingContextExt::rebind_context_skel, 0},
  {"resolve", &POA_CosNaming::NamingContextExt::resolve_skel, 0},
  {"unbind", &POA_CosNaming::NamingContextExt::unbind_skel, 0},
  {"new_context", &POA_CosNaming::NamingContextExt::new_context_skel, 0},
  {"bind_new_context", &POA_CosNaming::NamingContextExt::bind_new_context_skel, 0},
  {"destroy", &POA_CosNaming::NamingContextExt::destroy_skel, 0},
  {"list", &POA_CosNaming::NamingContextExt::list_skel, 0},
  {"to_string", &POA_CosNaming::NamingContextExt::to_string_skel, 0},
  {"to_name", &POA_CosNaming::NamingContextExt::to_name_skel, 0},
  {"to_url", &POA_CosNaming::NamingContextExt::to_url_skel, 0},
  {"resolve_str", &POA_CosNaming::NamingContextExt::resolve_str_skel, 0},
  {"_is_a", &POA_CosNaming::NamingContextExt::_is_a_skel, 0},
  {"_non_existent", &POA_CosNaming::NamingContextExt::_non_existent_skel, 0},
  {"_component", &POA_CosNaming::NamingContextExt::_component_skel, 0},
  {"_interface", &POA_CosNaming::NamingContextExt::_interface_skel, 0},
  {"_repository_id", &POA_CosNaming::NamingContextExt::_repository_id_skel, 0}
};

static const ::CORBA::Long _tao_CosNaming_NamingContextExt_optable_size = sizeof (ACE_Hash_Map_Entry<const char *, TAO::Operation_Skeletons>) * (57);
static char _tao_CosNaming_NamingContextExt_optable_pool [_tao_CosNaming_NamingContextExt_optable_size];
static ACE_Static_Allocator_Base _tao_CosNaming_NamingContextExt_allocator (_tao_CosNaming_NamingContextExt_optable_pool, _tao_CosNaming_NamingContextExt_optable_size);
static TAO_Dynamic_Hash_OpTable tao_CosNaming_NamingContextExt_optable (
    CosNaming_NamingContextExt_operations,
    19,
    38,
    &_tao_CosNaming_NamingContextExt_allocator
  );


// TAO_IDL - Generated from
// ../../../ACE_wrappers/TAO/TAO_IDL/be/be_visitor_interface/interface_ss.cpp:958

TAO::Collocation_Proxy_Broker *
CosNaming__TAO_NamingContextExt_Proxy_Broker_Factory_function ( ::CORBA::Object_ptr)
{
  return reinterpret_cast<TAO::Collocation_Proxy_Broker *> (0xdead); // Dummy
}

int
CosNaming__TAO_NamingContextExt_Proxy_Broker_Factory_Initializer (size_t)
{
  CosNaming__TAO_NamingContextExt_Proxy_Broker_Factory_function_pointer = 
    CosNaming__TAO_NamingContextExt_Proxy_Broker_Factory_function;
  
  return 0;
}

static int
CosNaming__TAO_NamingContextExt_Proxy_Broker_Stub_Factory_Initializer_Scarecrow =
  CosNaming__TAO_NamingContextExt_Proxy_Broker_Factory_Initializer (
      reinterpret_cast<size_t> (CosNaming__TAO_NamingContextExt_Proxy_Broker_Factory_Initializer)
    );

// TAO_IDL - Generated from 
// ../../../ACE_wrappers/TAO/TAO_IDL/be/be_visitor_interface/interface_ss.cpp:103

POA_CosNaming::NamingContextExt::NamingContextExt (void)
  : TAO_ServantBase ()
{
  this->optable_ = &tao_CosNaming_NamingContextExt_optable;
}

POA_CosNaming::NamingContextExt::NamingContextExt (const NamingContextExt& rhs)
  : TAO_Abstract_ServantBase (rhs),
    TAO_ServantBase (rhs),
    POA_CosNaming::NamingContext (rhs)
{
}

POA_CosNaming::NamingContextExt::~NamingContextExt (void)
{
}
namespace POA_CosNaming
{
  
  
  // TAO_IDL - Generated from
  // ../../../ACE_wrappers/TAO/TAO_IDL/be/be_visitor_operation/upcall_command_ss.cpp:136
  
  class to_string_NamingContextExt
    : public TAO::Upcall_Command
  {
  public:
    inline to_string_NamingContextExt (
      POA_CosNaming::NamingContextExt * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }
    
    virtual void execute (void)
    {
      TAO::SArg_Traits< ::CosNaming::NamingContextExt::StringName>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::CosNaming::NamingContextExt::StringName> (
          this->operation_details_,
          this->args_);
      
      TAO::SArg_Traits< ::CosNaming::Name>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::CosNaming::Name> (
          this->operation_details_,
          this->args_,
          1);
        
      retval =
        this->servant_->to_string (
          arg_1);
    }
  
  private:
    POA_CosNaming::NamingContextExt * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}


// TAO_IDL - Generated from 
// ../../../ACE_wrappers/TAO/TAO_IDL/be/be_visitor_operation/operation_ss.cpp:190

void POA_CosNaming::NamingContextExt::to_string_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const exceptions[] = 
    {
      CosNaming::NamingContext::_tc_InvalidName
    };
  static ::CORBA::ULong const nexceptions = 1;
#endif /* TAO_HAS_INTERCEPTORS */
  
  TAO::SArg_Traits< ::CosNaming::NamingContextExt::StringName>::ret_val retval;
  TAO::SArg_Traits< ::CosNaming::Name>::in_arg_val _tao_n;
  
  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_n
    };
  
  static size_t const nargs = 2;
  
  POA_CosNaming::NamingContextExt * const impl =
    static_cast<POA_CosNaming::NamingContextExt *> (servant);

  to_string_NamingContextExt command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}

namespace POA_CosNaming
{
  
  
  // TAO_IDL - Generated from
  // ../../../ACE_wrappers/TAO/TAO_IDL/be/be_visitor_operation/upcall_command_ss.cpp:136
  
  class to_name_NamingContextExt
    : public TAO::Upcall_Command
  {
  public:
    inline to_name_NamingContextExt (
      POA_CosNaming::NamingContextExt * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }
    
    virtual void execute (void)
    {
      TAO::SArg_Traits< ::CosNaming::Name>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::CosNaming::Name> (
          this->operation_details_,
          this->args_);
      
      TAO::SArg_Traits< ::CosNaming::NamingContextExt::StringName>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::CosNaming::NamingContextExt::StringName> (
          this->operation_details_,
          this->args_,
          1);
        
      retval =
        this->servant_->to_name (
          arg_1);
    }
  
  private:
    POA_CosNaming::NamingContextExt * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}


// TAO_IDL - Generated from 
// ../../../ACE_wrappers/TAO/TAO_IDL/be/be_visitor_operation/operation_ss.cpp:190

void POA_CosNaming::NamingContextExt::to_name_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const exceptions[] = 
    {
      CosNaming::NamingContext::_tc_InvalidName
    };
  static ::CORBA::ULong const nexceptions = 1;
#endif /* TAO_HAS_INTERCEPTORS */
  
  TAO::SArg_Traits< ::CosNaming::Name>::ret_val retval;
  TAO::SArg_Traits< ::CosNaming::NamingContextExt::StringName>::in_arg_val _tao_sn;
  
  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_sn
    };
  
  static size_t const nargs = 2;
  
  POA_CosNaming::NamingContextExt * const impl =
    static_cast<POA_CosNaming::NamingContextExt *> (servant);

  to_name_NamingContextExt command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}

namespace POA_CosNaming
{
  
  
  // TAO_IDL - Generated from
  // ../../../ACE_wrappers/TAO/TAO_IDL/be/be_visitor_operation/upcall_command_ss.cpp:136
  
  class to_url_NamingContextExt
    : public TAO::Upcall_Command
  {
  public:
    inline to_url_NamingContextExt (
      POA_CosNaming::NamingContextExt * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }
    
    virtual void execute (void)
    {
      TAO::SArg_Traits< ::CosNaming::NamingContextExt::URLString>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::CosNaming::NamingContextExt::URLString> (
          this->operation_details_,
          this->args_);
      
      TAO::SArg_Traits< ::CosNaming::NamingContextExt::Address>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::CosNaming::NamingContextExt::Address> (
          this->operation_details_,
          this->args_,
          1);
        
      TAO::SArg_Traits< ::CosNaming::NamingContextExt::StringName>::in_arg_type arg_2 =
        TAO::Portable_Server::get_in_arg< ::CosNaming::NamingContextExt::StringName> (
          this->operation_details_,
          this->args_,
          2);
        
      retval =
        this->servant_->to_url (
          arg_1
          , arg_2);
    }
  
  private:
    POA_CosNaming::NamingContextExt * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}


// TAO_IDL - Generated from 
// ../../../ACE_wrappers/TAO/TAO_IDL/be/be_visitor_operation/operation_ss.cpp:190

void POA_CosNaming::NamingContextExt::to_url_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const exceptions[] = 
    {
      CosNaming::NamingContextExt::_tc_InvalidAddress,
      CosNaming::NamingContext::_tc_InvalidName
    };
  static ::CORBA::ULong const nexceptions = 2;
#endif /* TAO_HAS_INTERCEPTORS */
  
  TAO::SArg_Traits< ::CosNaming::NamingContextExt::URLString>::ret_val retval;
  TAO::SArg_Traits< ::CosNaming::NamingContextExt::Address>::in_arg_val _tao_addr;
  TAO::SArg_Traits< ::CosNaming::NamingContextExt::StringName>::in_arg_val _tao_sn;
  
  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_addr,
      &_tao_sn
    };
  
  static size_t const nargs = 3;
  
  POA_CosNaming::NamingContextExt * const impl =
    static_cast<POA_CosNaming::NamingContextExt *> (servant);

  to_url_NamingContextExt command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}

namespace POA_CosNaming
{
  
  
  // TAO_IDL - Generated from
  // ../../../ACE_wrappers/TAO/TAO_IDL/be/be_visitor_operation/upcall_command_ss.cpp:136
  
  class resolve_str_NamingContextExt
    : public TAO::Upcall_Command
  {
  public:
    inline resolve_str_NamingContextExt (
      POA_CosNaming::NamingContextExt * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }
    
    virtual void execute (void)
    {
      TAO::SArg_Traits< ::CORBA::Object>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::CORBA::Object> (
          this->operation_details_,
          this->args_);
      
      TAO::SArg_Traits< ::CosNaming::NamingContextExt::StringName>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::CosNaming::NamingContextExt::StringName> (
          this->operation_details_,
          this->args_,
          1);
        
      retval =
        this->servant_->resolve_str (
          arg_1);
    }
  
  private:
    POA_CosNaming::NamingContextExt * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}


// TAO_IDL - Generated from 
// ../../../ACE_wrappers/TAO/TAO_IDL/be/be_visitor_operation/operation_ss.cpp:190

void POA_CosNaming::NamingContextExt::resolve_str_skel (
    TAO_ServerRequest & server_request,
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const exceptions[] = 
    {
      CosNaming::NamingContext::_tc_NotFound,
      CosNaming::NamingContext::_tc_CannotProceed,
      CosNaming::NamingContext::_tc_InvalidName
    };
  static ::CORBA::ULong const nexceptions = 3;
#endif /* TAO_HAS_INTERCEPTORS */
  
  TAO::SArg_Traits< ::CORBA::Object>::ret_val retval;
  TAO::SArg_Traits< ::CosNaming::NamingContextExt::StringName>::in_arg_val _tao_n;
  
  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_n
    };
  
  static size_t const nargs = 2;
  
  POA_CosNaming::NamingContextExt * const impl =
    static_cast<POA_CosNaming::NamingContextExt *> (servant);

  resolve_str_NamingContextExt command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}



// TAO_IDL - Generated from 
// ../../../ACE_wrappers/TAO/TAO_IDL/be/be_visitor_interface/interface_ss.cpp:169

namespace POA_CosNaming
{
  
  
  // TAO_IDL - Generated from
  // ../../../ACE_wrappers/TAO/TAO_IDL/be/be_visitor_operation/upcall_command_ss.cpp:136
  
  class _is_a_NamingContextExt_Upcall_Command
    : public TAO::Upcall_Command
  {
  public:
    inline _is_a_NamingContextExt_Upcall_Command (
      POA_CosNaming::NamingContextExt * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }
    
    virtual void execute (void)
    {
      TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::ACE_InputCDR::to_boolean> (
          this->operation_details_,
          this->args_);
      
      TAO::SArg_Traits< ::CORBA::Char *>::in_arg_type arg_1 =
        TAO::Portable_Server::get_in_arg< ::CORBA::Char *> (
          this->operation_details_,
          this->args_,
          1);
        
      retval =
        this->servant_-> _is_a (
          arg_1);
    }
  
  private:
    POA_CosNaming::NamingContextExt * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}


void POA_CosNaming::NamingContextExt::_is_a_skel (
    TAO_ServerRequest & server_request, 
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */
  
  TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::ret_val retval;
  TAO::SArg_Traits< ::CORBA::Char *>::in_arg_val _tao_repository_id;
  
  TAO::Argument * const args[] =
    {
      &retval,
      &_tao_repository_id
    };
  
  static size_t const nargs = 2;
  
  POA_CosNaming::NamingContextExt * const impl =
    static_cast<POA_CosNaming::NamingContextExt *> (servant);
  
  _is_a_NamingContextExt_Upcall_Command command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}

namespace POA_CosNaming
{
  
  
  // TAO_IDL - Generated from
  // ../../../ACE_wrappers/TAO/TAO_IDL/be/be_visitor_operation/upcall_command_ss.cpp:136
  
  class _non_existent_NamingContextExt_Upcall_Command
    : public TAO::Upcall_Command
  {
  public:
    inline _non_existent_NamingContextExt_Upcall_Command (
      POA_CosNaming::NamingContextExt * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }
    
    virtual void execute (void)
    {
      TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::ACE_InputCDR::to_boolean> (
          this->operation_details_,
          this->args_);
      
      retval =
        this->servant_-> _non_existent ();
    }
  
  private:
    POA_CosNaming::NamingContextExt * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}


void POA_CosNaming::NamingContextExt::_non_existent_skel (
    TAO_ServerRequest & server_request, 
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */
  
  TAO::SArg_Traits< ::ACE_InputCDR::to_boolean>::ret_val retval;
  
  TAO::Argument * const args[] =
    {
      &retval
    };
  
  static size_t const nargs = 1;
  
  POA_CosNaming::NamingContextExt * const impl =
    static_cast<POA_CosNaming::NamingContextExt *> (servant);
  
  _non_existent_NamingContextExt_Upcall_Command command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}
namespace POA_CosNaming
{
  
  
  // TAO_IDL - Generated from
  // ../../../ACE_wrappers/TAO/TAO_IDL/be/be_visitor_operation/upcall_command_ss.cpp:136
  
  class _repository_id_NamingContextExt_Upcall_Command
    : public TAO::Upcall_Command
  {
  public:
    inline _repository_id_NamingContextExt_Upcall_Command (
      POA_CosNaming::NamingContextExt * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }
    
    virtual void execute (void)
    {
      TAO::SArg_Traits< ::CORBA::Char *>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::CORBA::Char *> (
          this->operation_details_,
          this->args_);
      
      retval =
        this->servant_-> _repository_id ();
    }
  
  private:
    POA_CosNaming::NamingContextExt * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}


void POA_CosNaming::NamingContextExt::_repository_id_skel (
    TAO_ServerRequest & server_request, 
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant)
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */
  
  TAO::SArg_Traits< ::CORBA::Char *>::ret_val retval;
  
  TAO::Argument * const args[] =
    {
      &retval
    };
  
  static size_t const nargs = 1;
  
  POA_CosNaming::NamingContextExt * const impl =
    static_cast<POA_CosNaming::NamingContextExt *> (servant);
  
  _repository_id_NamingContextExt_Upcall_Command command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}

// TAO_IDL - Generated from 
// ../../../ACE_wrappers/TAO/TAO_IDL/be/be_visitor_interface/interface_ss.cpp:508

void POA_CosNaming::NamingContextExt::_interface_skel (
    TAO_ServerRequest & server_request, 
    void * /* servant_upcall */,
    void * servant)
{
  TAO_IFR_Client_Adapter *_tao_adapter =
    ACE_Dynamic_Service<TAO_IFR_Client_Adapter>::instance (
        TAO_ORB_Core::ifr_client_adapter_name ()
      );
    
  if (_tao_adapter == 0)
    {
      throw ::CORBA::INTF_REPOS (::CORBA::OMGVMCID | 1, ::CORBA::COMPLETED_NO);
    }
  
  POA_CosNaming::NamingContextExt * const impl =
    static_cast<POA_CosNaming::NamingContextExt *> (servant);
  ::CORBA::InterfaceDef_ptr _tao_retval = impl->_get_interface ();
  server_request.init_reply ();
  TAO_OutputCDR &_tao_out = *server_request.outgoing ();
  
  ::CORBA::Boolean const _tao_result =
    _tao_adapter->interfacedef_cdr_insert (_tao_out, _tao_retval);
  
  _tao_adapter->dispose (_tao_retval);
  
  if (_tao_result == false)
    {
      throw ::CORBA::MARSHAL ();
    }
}

namespace POA_CosNaming
{
  
  
  // TAO_IDL - Generated from
  // ../../../ACE_wrappers/TAO/TAO_IDL/be/be_visitor_operation/upcall_command_ss.cpp:136
  
  class _get_component_NamingContextExt_Upcall_Command
    : public TAO::Upcall_Command
  {
  public:
    inline _get_component_NamingContextExt_Upcall_Command (
      POA_CosNaming::NamingContextExt * servant,
      TAO_Operation_Details const * operation_details,
      TAO::Argument * const args[])
      : servant_ (servant)
        , operation_details_ (operation_details)
        , args_ (args)
    {
    }
    
    virtual void execute (void)
    {
      TAO::SArg_Traits< ::CORBA::Object>::ret_arg_type retval =
        TAO::Portable_Server::get_ret_arg< ::CORBA::Object> (
          this->operation_details_,
          this->args_);
      
      retval =
        this->servant_-> _get_component ();
    }
  
  private:
    POA_CosNaming::NamingContextExt * const servant_;
    TAO_Operation_Details const * const operation_details_;
    TAO::Argument * const * const args_;
  };
}


void POA_CosNaming::NamingContextExt::_component_skel (
    TAO_ServerRequest & server_request, 
    void * TAO_INTERCEPTOR (servant_upcall),
    void * servant
  )
{
#if TAO_HAS_INTERCEPTORS == 1
  static ::CORBA::TypeCode_ptr const * const exceptions = 0;
  static ::CORBA::ULong const nexceptions = 0;
#endif /* TAO_HAS_INTERCEPTORS */
  
  TAO::SArg_Traits< ::CORBA::Object>::ret_val retval;
  
  TAO::Argument * const args[] =
    {
      &retval
    };
  
  static size_t const nargs = 1;
  
  POA_CosNaming::NamingContextExt * const impl =
    static_cast<POA_CosNaming::NamingContextExt *> (servant);
  
  _get_component_NamingContextExt_Upcall_Command command (
    impl,
    server_request.operation_details (),
    args);
  
  TAO::Upcall_Wrapper upcall_wrapper;
  upcall_wrapper.upcall (server_request
                         , args
                         , nargs
                         , command
#if TAO_HAS_INTERCEPTORS == 1
                         , servant_upcall
                         , exceptions
                         , nexceptions
#endif  /* TAO_HAS_INTERCEPTORS == 1 */
                         );
}

::CORBA::Boolean POA_CosNaming::NamingContextExt::_is_a (const char* value)
{
  return
    (
      !ACE_OS::strcmp (
          value,
          "IDL:omg.org/CosNaming/NamingContext:1.0"
        ) ||
      !ACE_OS::strcmp (
          value,
          "IDL:omg.org/CosNaming/NamingContextExt:1.0"
        ) ||
      !ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        )
    );
}

const char* POA_CosNaming::NamingContextExt::_interface_repository_id (void) const
{
  return "IDL:omg.org/CosNaming/NamingContextExt:1.0";
}

// TAO_IDL - Generated from
// ../../../ACE_wrappers/TAO/TAO_IDL/be/be_visitor_interface/interface_ss.cpp:902

void POA_CosNaming::NamingContextExt::_dispatch (TAO_ServerRequest & req, void * servant_upcall)
{
  this->synchronous_upcall_dispatch (req, servant_upcall, this);
}

// TAO_IDL - Generated from
// ../../../ACE_wrappers/TAO/TAO_IDL/be/be_visitor_interface/interface_ss.cpp:852

CosNaming::NamingContextExt *
POA_CosNaming::NamingContextExt::_this (void)
{
  TAO_Stub *stub = this->_create_stub ();
  
  TAO_Stub_Auto_Ptr safe_stub (stub);
  ::CORBA::Object_ptr tmp = CORBA::Object_ptr ();
  
  ::CORBA::Boolean const _tao_opt_colloc =
    stub->servant_orb_var ()->orb_core ()->optimize_collocation_objects ();
  
  ACE_NEW_RETURN (
      tmp,
      ::CORBA::Object (stub, _tao_opt_colloc, this),
      0
    );
  
  ::CORBA::Object_var obj = tmp;
  (void) safe_stub.release ();
  
  typedef ::CosNaming::NamingContextExt STUB_SCOPED_NAME;
  return
    TAO::Narrow_Utils<STUB_SCOPED_NAME>::unchecked_narrow (
        obj.in (),
        CosNaming__TAO_NamingContextExt_Proxy_Broker_Factory_function_pointer
      );
}

#endif /* ifndef */

