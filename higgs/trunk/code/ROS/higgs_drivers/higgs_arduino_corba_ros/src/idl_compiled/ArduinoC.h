// -*- C++ -*-
//
// $Id$

// ****  Code generated by the The ACE ORB (TAO) IDL Compiler ****
// TAO and the TAO IDL Compiler have been developed by:
//       Center for Distributed Object Computing
//       Washington University
//       St. Louis, MO
//       USA
//       http://www.cs.wustl.edu/~schmidt/doc-center.html
// and
//       Distributed Object Computing Laboratory
//       University of California at Irvine
//       Irvine, CA
//       USA
//       http://doc.ece.uci.edu/
// and
//       Institute for Software Integrated Systems
//       Vanderbilt University
//       Nashville, TN
//       USA
//       http://www.isis.vanderbilt.edu/
//
// Information about TAO is available at:
//     http://www.cs.wustl.edu/~schmidt/TAO.html

// TAO_IDL - Generated from
// ../../../ACE_wrappers/TAO/TAO_IDL/be/be_codegen.cpp:135

#ifndef _TAO_IDL_ARDUINOC_H_
#define _TAO_IDL_ARDUINOC_H_


#include /**/ "ace/config-all.h"

#if !defined (ACE_LACKS_PRAGMA_ONCE)
# pragma once
#endif /* ACE_LACKS_PRAGMA_ONCE */


#include "tao/AnyTypeCode/AnyTypeCode_methods.h"
#include "tao/ORB.h"
#include "tao/SystemException.h"
#include "tao/Basic_Types.h"
#include "tao/ORB_Constants.h"
#include "tao/Object.h"
#include "tao/Objref_VarOut_T.h"
#include "tao/VarOut_T.h"
#include /**/ "tao/Versioned_Namespace.h"

#if defined (TAO_EXPORT_MACRO)
#undef TAO_EXPORT_MACRO
#endif
#define TAO_EXPORT_MACRO 

// TAO_IDL - Generated from 
// ../../../ACE_wrappers/TAO/TAO_IDL/be/be_visitor_root/root_ch.cpp:62
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  class Collocation_Proxy_Broker;
  template<typename T> class Narrow_Utils;
}
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// ../../../ACE_wrappers/TAO/TAO_IDL/be/be_visitor_module/module_ch.cpp:49

namespace higgs
{
  
  // TAO_IDL - Generated from
  // ../../../ACE_wrappers/TAO/TAO_IDL/be/be_visitor_typedef/typedef_ch.cpp:379
  
  typedef ::CORBA::Short Pin;
  typedef ::CORBA::Short_out Pin_out;
  
  // TAO_IDL - Generated from
  // ../../../ACE_wrappers/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:49
  
  extern  ::CORBA::TypeCode_ptr const _tc_Pin;
  
  // TAO_IDL - Generated from
  // ../../../ACE_wrappers/TAO/TAO_IDL/be/be_visitor_typedef/typedef_ch.cpp:379
  
  typedef ::CORBA::Double Referencia;
  typedef ::CORBA::Double_out Referencia_out;
  
  // TAO_IDL - Generated from
  // ../../../ACE_wrappers/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:49
  
  extern  ::CORBA::TypeCode_ptr const _tc_Referencia;
  
  // TAO_IDL - Generated from
  // ../../../ACE_wrappers/TAO/TAO_IDL/be/be_visitor_typedef/typedef_ch.cpp:379
  
  typedef ::CORBA::Short Indice;
  typedef ::CORBA::Short_out Indice_out;
  
  // TAO_IDL - Generated from
  // ../../../ACE_wrappers/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:49
  
  extern  ::CORBA::TypeCode_ptr const _tc_Indice;
  
  // TAO_IDL - Generated from
  // ../../../ACE_wrappers/TAO/TAO_IDL/be/be_visitor_enum/enum_ch.cpp:57
  
  enum Device
  {
    DevWrist,
    DevLaser,
    DevCamera,
    DevGPS,
    DevServo,
    DevSensors
  };
  
  typedef Device &Device_out;
  
  // TAO_IDL - Generated from
  // ../../../ACE_wrappers/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:49
  
  extern  ::CORBA::TypeCode_ptr const _tc_Device;
  
  // TAO_IDL - Generated from
  // ../../../ACE_wrappers/TAO/TAO_IDL/be/be_type.cpp:269
  
  struct iv_data;
  
  typedef
    TAO_Fixed_Var_T<
        iv_data
      >
    iv_data_var;
  
  typedef
    iv_data &
    iv_data_out;
  
  // TAO_IDL - Generated from
  // ../../../ACE_wrappers/TAO/TAO_IDL/be/be_visitor_structure/structure_ch.cpp:57
  
  struct  iv_data
  {
    typedef iv_data_var _var_type;
    typedef iv_data_out _out_type;
    
    static void _tao_any_destructor (void *);
    ::CORBA::Double current;
    ::CORBA::Double volts;
  };
  
  // TAO_IDL - Generated from
  // ../../../ACE_wrappers/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:49
  
  extern  ::CORBA::TypeCode_ptr const _tc_iv_data;
  
  // TAO_IDL - Generated from
  // ../../../ACE_wrappers/TAO/TAO_IDL/be/be_interface.cpp:638

#if !defined (_HIGGS_ARDUINO__VAR_OUT_CH_)
#define _HIGGS_ARDUINO__VAR_OUT_CH_
  
  class Arduino;
  typedef Arduino *Arduino_ptr;
  
  typedef
    TAO_Objref_Var_T<
        Arduino
      >
    Arduino_var;
  
  typedef
    TAO_Objref_Out_T<
        Arduino
      >
    Arduino_out;

#endif /* end #if !defined */
  
  // TAO_IDL - Generated from
  // ../../../ACE_wrappers/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:54

#if !defined (_HIGGS_ARDUINO_CH_)
#define _HIGGS_ARDUINO_CH_
  
  class  Arduino
    : public virtual ::CORBA::Object
  {
  public:
    friend class TAO::Narrow_Utils<Arduino>;
    typedef Arduino_ptr _ptr_type;
    typedef Arduino_var _var_type;
    typedef Arduino_out _out_type;
    
    // The static operations.
    static Arduino_ptr _duplicate (Arduino_ptr obj);
    
    static void _tao_release (Arduino_ptr obj);
    
    static Arduino_ptr _narrow (::CORBA::Object_ptr obj);
    static Arduino_ptr _unchecked_narrow (::CORBA::Object_ptr obj);
    static Arduino_ptr _nil (void)
    {
      return static_cast<Arduino_ptr> (0);
    }
    
    static void _tao_any_destructor (void *);
    
    // TAO_IDL - Generated from
    // ../../../ACE_wrappers/TAO/TAO_IDL/be/be_visitor_operation/operation_ch.cpp:46
    
    virtual void cambiarReferencia (
        ::higgs::Referencia ref);
    
    // TAO_IDL - Generated from
    // ../../../ACE_wrappers/TAO/TAO_IDL/be/be_visitor_operation/operation_ch.cpp:46
    
    virtual void encenderPin (
        ::higgs::Pin p);
    
    // TAO_IDL - Generated from
    // ../../../ACE_wrappers/TAO/TAO_IDL/be/be_visitor_operation/operation_ch.cpp:46
    
    virtual void apagarPin (
        ::higgs::Pin p);
    
    // TAO_IDL - Generated from
    // ../../../ACE_wrappers/TAO/TAO_IDL/be/be_visitor_operation/operation_ch.cpp:46
    
    virtual ::higgs::iv_data iv_motors (
        void);
    
    // TAO_IDL - Generated from
    // ../../../ACE_wrappers/TAO/TAO_IDL/be/be_visitor_operation/operation_ch.cpp:46
    
    virtual ::higgs::iv_data iv_instrumentation (
        void);
    
    // TAO_IDL - Generated from
    // ../../../ACE_wrappers/TAO/TAO_IDL/be/be_visitor_operation/operation_ch.cpp:46
    
    virtual ::higgs::iv_data iv_vaio (
        void);
    
    // TAO_IDL - Generated from
    // ../../../ACE_wrappers/TAO/TAO_IDL/be/be_visitor_operation/operation_ch.cpp:46
    
    virtual ::CORBA::Double brujula (
        void);
    
    // TAO_IDL - Generated from
    // ../../../ACE_wrappers/TAO/TAO_IDL/be/be_visitor_operation/operation_ch.cpp:46
    
    virtual void acelerometro (
        ::CORBA::Double_out x,
        ::CORBA::Double_out y);
    
    // TAO_IDL - Generated from
    // ../../../ACE_wrappers/TAO/TAO_IDL/be/be_visitor_operation/operation_ch.cpp:46
    
    virtual void TurnOn (
        ::higgs::Device dev);
    
    // TAO_IDL - Generated from
    // ../../../ACE_wrappers/TAO/TAO_IDL/be/be_visitor_operation/operation_ch.cpp:46
    
    virtual void TurnOff (
        ::higgs::Device dev);
    
    // TAO_IDL - Generated from
    // ../../../ACE_wrappers/TAO/TAO_IDL/be/be_visitor_interface/interface_ch.cpp:216
    
    virtual ::CORBA::Boolean _is_a (const char *type_id);
    virtual const char* _interface_repository_id (void) const;
    virtual ::CORBA::Boolean marshal (TAO_OutputCDR &cdr);
  private:
    TAO::Collocation_Proxy_Broker *the_TAO_Arduino_Proxy_Broker_;
  
  protected:
    // Concrete interface only.
    Arduino (void);
    
    // These methods travese the inheritance tree and set the
    // parents piece of the given class in the right mode.
    virtual void higgs_Arduino_setup_collocation (void);
    
    // Concrete non-local interface only.
    Arduino (
        IOP::IOR *ior,
        TAO_ORB_Core *orb_core = 0);
    
    // Non-local interface only.
    Arduino (
        TAO_Stub *objref,
        ::CORBA::Boolean _tao_collocated = false,
        TAO_Abstract_ServantBase *servant = 0,
        TAO_ORB_Core *orb_core = 0);
    
    virtual ~Arduino (void);
  
  private:
    // Private and unimplemented for concrete interfaces.
    Arduino (const Arduino &);
    
    void operator= (const Arduino &);
  };

#endif /* end #if !defined */
  
  // TAO_IDL - Generated from
  // ../../../ACE_wrappers/TAO/TAO_IDL/be/be_visitor_typecode/typecode_decl.cpp:49
  
  extern  ::CORBA::TypeCode_ptr const _tc_Arduino;

// TAO_IDL - Generated from
// ../../../ACE_wrappers/TAO/TAO_IDL/be/be_visitor_module/module_ch.cpp:78

} // module higgs

// Proxy Broker Factory function pointer declarations.

// TAO_IDL - Generated from
// ../../../ACE_wrappers/TAO/TAO_IDL/be/be_visitor_root/root.cpp:139

extern 
TAO::Collocation_Proxy_Broker *
(*higgs__TAO_Arduino_Proxy_Broker_Factory_function_pointer) (
    ::CORBA::Object_ptr obj
  );

// TAO_IDL - Generated from
// ../../../ACE_wrappers/TAO/TAO_IDL/be/be_visitor_traits.cpp:64

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Traits specializations.
namespace TAO
{

#if !defined (_HIGGS_ARDUINO__TRAITS_)
#define _HIGGS_ARDUINO__TRAITS_
  
  template<>
  struct  Objref_Traits< ::higgs::Arduino>
  {
    static ::higgs::Arduino_ptr duplicate (
        ::higgs::Arduino_ptr p
      );
    static void release (
        ::higgs::Arduino_ptr p
      );
    static ::higgs::Arduino_ptr nil (void);
    static ::CORBA::Boolean marshal (
        const ::higgs::Arduino_ptr p,
        TAO_OutputCDR & cdr
      );
  };

#endif /* end #if !defined */
}
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// ../../../ACE_wrappers/TAO/TAO_IDL/be/be_visitor_enum/any_op_ch.cpp:52
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



 void operator<<= (::CORBA::Any &, higgs::Device);
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, higgs::Device &);
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// ../../../ACE_wrappers/TAO/TAO_IDL/be/be_visitor_structure/any_op_ch.cpp:53


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= (::CORBA::Any &, const higgs::iv_data &); // copying version
 void operator<<= (::CORBA::Any &, higgs::iv_data*); // noncopying version
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, higgs::iv_data *&); // deprecated
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, const higgs::iv_data *&);
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// ../../../ACE_wrappers/TAO/TAO_IDL/be/be_visitor_interface/any_op_ch.cpp:54



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace higgs
{
   void operator<<= ( ::CORBA::Any &, Arduino_ptr); // copying
   void operator<<= ( ::CORBA::Any &, Arduino_ptr *); // non-copying
   ::CORBA::Boolean operator>>= (const ::CORBA::Any &, Arduino_ptr &);
}

#else


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 void operator<<= (::CORBA::Any &, higgs::Arduino_ptr); // copying
 void operator<<= (::CORBA::Any &, higgs::Arduino_ptr *); // non-copying
 ::CORBA::Boolean operator>>= (const ::CORBA::Any &, higgs::Arduino_ptr &);
TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// ../../../ACE_wrappers/TAO/TAO_IDL/be/be_visitor_enum/cdr_op_ch.cpp:50


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 ::CORBA::Boolean operator<< (TAO_OutputCDR &strm, higgs::Device _tao_enumerator);
 ::CORBA::Boolean operator>> (TAO_InputCDR &strm, higgs::Device &_tao_enumerator);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// ../../../ACE_wrappers/TAO/TAO_IDL/be/be_visitor_structure/cdr_op_ch.cpp:54


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 ::CORBA::Boolean operator<< (TAO_OutputCDR &, const higgs::iv_data &);
 ::CORBA::Boolean operator>> (TAO_InputCDR &, higgs::iv_data &);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// ../../../ACE_wrappers/TAO/TAO_IDL/be/be_visitor_interface/cdr_op_ch.cpp:55

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

 ::CORBA::Boolean operator<< (TAO_OutputCDR &, const higgs::Arduino_ptr );
 ::CORBA::Boolean operator>> (TAO_InputCDR &, higgs::Arduino_ptr &);

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// ../../../ACE_wrappers/TAO/TAO_IDL/be/be_codegen.cpp:1226
#if defined (__ACE_INLINE__)
#include "ArduinoC.inl"
#endif /* defined INLINE */

#endif /* ifndef */


