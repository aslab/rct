// -*- C++ -*-
//
// $Id$

// ****  Code generated by the The ACE ORB (TAO) IDL Compiler ****
// TAO and the TAO IDL Compiler have been developed by:
//       Center for Distributed Object Computing
//       Washington University
//       St. Louis, MO
//       USA
//       http://www.cs.wustl.edu/~schmidt/doc-center.html
// and
//       Distributed Object Computing Laboratory
//       University of California at Irvine
//       Irvine, CA
//       USA
//       http://doc.ece.uci.edu/
// and
//       Institute for Software Integrated Systems
//       Vanderbilt University
//       Nashville, TN
//       USA
//       http://www.isis.vanderbilt.edu/
//
// Information about TAO is available at:
//     http://www.cs.wustl.edu/~schmidt/TAO.html

// TAO_IDL - Generated from
// ../../../ACE_wrappers/TAO/TAO_IDL/be/be_codegen.cpp:381


#include "ArduinoC.h"
#include "tao/AnyTypeCode/Null_RefCount_Policy.h"
#include "tao/AnyTypeCode/TypeCode_Constants.h"
#include "tao/AnyTypeCode/Alias_TypeCode_Static.h"
#include "tao/AnyTypeCode/Enum_TypeCode_Static.h"
#include "tao/AnyTypeCode/Objref_TypeCode_Static.h"
#include "tao/AnyTypeCode/Struct_TypeCode_Static.h"
#include "tao/AnyTypeCode/TypeCode_Struct_Field.h"
#include "tao/CDR.h"
#include "tao/Exception_Data.h"
#include "tao/Invocation_Adapter.h"
#include "tao/Object_T.h"
#include "tao/CDR.h"
#include "tao/AnyTypeCode/Any.h"
#include "tao/AnyTypeCode/Any_Impl_T.h"
#include "tao/AnyTypeCode/Any_Dual_Impl_T.h"
#include "tao/AnyTypeCode/Any_Basic_Impl_T.h"
#include "tao/Basic_Arguments.h"
#include "tao/Fixed_Size_Argument_T.h"
#include "ace/OS_NS_string.h"

#if !defined (__ACE_INLINE__)
#include "ArduinoC.inl"
#endif /* !defined INLINE */

// TAO_IDL - Generated from
// ../../../ACE_wrappers/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:73

TAO_BEGIN_VERSIONED_NAMESPACE_DECL


// Arg traits specializations.
namespace TAO
{
  
  // TAO_IDL - Generated from
  // ../../../ACE_wrappers/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:826

#if !defined (_HIGGS_DEVICE__ARG_TRAITS_)
#define _HIGGS_DEVICE__ARG_TRAITS_
  
  template<>
  class Arg_Traits<higgs::Device>
    : public
        Basic_Arg_Traits_T<
            higgs::Device,
            TAO::Any_Insert_Policy_Stream <higgs::Device>
          >
  {
  };

#endif /* end #if !defined */
  
  // TAO_IDL - Generated from
  // ../../../ACE_wrappers/TAO/TAO_IDL/be/be_visitor_arg_traits.cpp:868

#if !defined (_HIGGS_IV_DATA__ARG_TRAITS_)
#define _HIGGS_IV_DATA__ARG_TRAITS_
  
  template<>
  class Arg_Traits<higgs::iv_data>
    : public
        Fixed_Size_Arg_Traits_T<
            higgs::iv_data,
            TAO::Any_Insert_Policy_Stream <higgs::iv_data>
          >
  {
  };

#endif /* end #if !defined */
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// ../../../ACE_wrappers/TAO/TAO_IDL/be/be_visitor_typecode/alias_typecode.cpp:50

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_higgs_Pin (
    ::CORBA::tk_alias,
    "IDL:higgs/Pin:1.0",
    "Pin",
    &CORBA::_tc_short);
  
namespace higgs
{
  ::CORBA::TypeCode_ptr const _tc_Pin =
    &_tao_tc_higgs_Pin;
}



// TAO_IDL - Generated from
// ../../../ACE_wrappers/TAO/TAO_IDL/be/be_visitor_typecode/alias_typecode.cpp:50

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_higgs_Referencia (
    ::CORBA::tk_alias,
    "IDL:higgs/Referencia:1.0",
    "Referencia",
    &CORBA::_tc_double);
  
namespace higgs
{
  ::CORBA::TypeCode_ptr const _tc_Referencia =
    &_tao_tc_higgs_Referencia;
}



// TAO_IDL - Generated from
// ../../../ACE_wrappers/TAO/TAO_IDL/be/be_visitor_typecode/alias_typecode.cpp:50

static TAO::TypeCode::Alias<char const *,
                            ::CORBA::TypeCode_ptr const *,
                            TAO::Null_RefCount_Policy>
  _tao_tc_higgs_Indice (
    ::CORBA::tk_alias,
    "IDL:higgs/Indice:1.0",
    "Indice",
    &CORBA::_tc_short);
  
namespace higgs
{
  ::CORBA::TypeCode_ptr const _tc_Indice =
    &_tao_tc_higgs_Indice;
}



// TAO_IDL - Generated from
// ../../../ACE_wrappers/TAO/TAO_IDL/be/be_visitor_typecode/enum_typecode.cpp:31
static char const * const _tao_enumerators_higgs_Device[] =
  {
    "DevWrist",
    "DevLaser",
    "DevCamera",
    "DevGPS",
    "DevServo",
    "DevSensors"
    
  };

static TAO::TypeCode::Enum<char const *,
                           char const * const *,
                           TAO::Null_RefCount_Policy>
  _tao_tc_higgs_Device (
    "IDL:higgs/Device:1.0",
    "Device",
    _tao_enumerators_higgs_Device,
    6);
  
namespace higgs
{
  ::CORBA::TypeCode_ptr const _tc_Device =
    &_tao_tc_higgs_Device;
}



// TAO_IDL - Generated from
// ../../../ACE_wrappers/TAO/TAO_IDL/be/be_visitor_typecode/struct_typecode.cpp:84

static TAO::TypeCode::Struct_Field<
  char const *,
  ::CORBA::TypeCode_ptr const *> const 
    _tao_fields_higgs_iv_data[] =
      {
        { "current", &CORBA::_tc_double },
        { "volts", &CORBA::_tc_double }
      };
  
static TAO::TypeCode::Struct<
  char const *,
  ::CORBA::TypeCode_ptr const *,
  TAO::TypeCode::Struct_Field<
    char const *,
    ::CORBA::TypeCode_ptr const *> const *,
  TAO::Null_RefCount_Policy>
_tao_tc_higgs_iv_data (
  ::CORBA::tk_struct,
  "IDL:higgs/iv_data:1.0",
  "iv_data",
  _tao_fields_higgs_iv_data,
  2);

namespace higgs
{
  ::CORBA::TypeCode_ptr const _tc_iv_data =
    &_tao_tc_higgs_iv_data;
}



// TAO_IDL - Generated from 
// ../../../ACE_wrappers/TAO/TAO_IDL/be/be_visitor_structure/structure_cs.cpp:66

void 
higgs::iv_data::_tao_any_destructor (
    void *_tao_void_pointer
  )
{
  iv_data *_tao_tmp_pointer =
    static_cast<iv_data *> (_tao_void_pointer);
  delete _tao_tmp_pointer;
}

// TAO_IDL - Generated from
// ../../../ACE_wrappers/TAO/TAO_IDL/be/be_visitor_interface/interface_cs.cpp:60

// Traits specializations for higgs::Arduino.

higgs::Arduino_ptr
TAO::Objref_Traits<higgs::Arduino>::duplicate (
    higgs::Arduino_ptr p)
{
  return higgs::Arduino::_duplicate (p);
}

void
TAO::Objref_Traits<higgs::Arduino>::release (
    higgs::Arduino_ptr p)
{
  ::CORBA::release (p);
}

higgs::Arduino_ptr
TAO::Objref_Traits<higgs::Arduino>::nil (void)
{
  return higgs::Arduino::_nil ();
}

::CORBA::Boolean
TAO::Objref_Traits<higgs::Arduino>::marshal (
    const higgs::Arduino_ptr p,
    TAO_OutputCDR & cdr)
{
  return ::CORBA::Object::marshal (p, cdr);
}

// Function pointer for collocation factory initialization.
TAO::Collocation_Proxy_Broker * 
(*higgs__TAO_Arduino_Proxy_Broker_Factory_function_pointer) (
    ::CORBA::Object_ptr obj
  ) = 0;

// TAO_IDL - Generated from
// ../../../ACE_wrappers/TAO/TAO_IDL/be/be_visitor_operation/operation_cs.cpp:78

void higgs::Arduino::cambiarReferencia (
    ::higgs::Referencia ref)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_Arduino_Proxy_Broker_ == 0)
    {
      higgs_Arduino_setup_collocation ();
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::higgs::Referencia>::in_arg_val _tao_ref (ref);
  
  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_ref
    };
  
  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      2,
      "cambiarReferencia",
      17,
      this->the_TAO_Arduino_Proxy_Broker_
    );
  
  _tao_call.invoke (0, 0);
}

// TAO_IDL - Generated from
// ../../../ACE_wrappers/TAO/TAO_IDL/be/be_visitor_operation/operation_cs.cpp:78

void higgs::Arduino::encenderPin (
    ::higgs::Pin p)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_Arduino_Proxy_Broker_ == 0)
    {
      higgs_Arduino_setup_collocation ();
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::higgs::Pin>::in_arg_val _tao_p (p);
  
  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_p
    };
  
  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      2,
      "encenderPin",
      11,
      this->the_TAO_Arduino_Proxy_Broker_
    );
  
  _tao_call.invoke (0, 0);
}

// TAO_IDL - Generated from
// ../../../ACE_wrappers/TAO/TAO_IDL/be/be_visitor_operation/operation_cs.cpp:78

void higgs::Arduino::apagarPin (
    ::higgs::Pin p)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_Arduino_Proxy_Broker_ == 0)
    {
      higgs_Arduino_setup_collocation ();
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::higgs::Pin>::in_arg_val _tao_p (p);
  
  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_p
    };
  
  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      2,
      "apagarPin",
      9,
      this->the_TAO_Arduino_Proxy_Broker_
    );
  
  _tao_call.invoke (0, 0);
}

// TAO_IDL - Generated from
// ../../../ACE_wrappers/TAO/TAO_IDL/be/be_visitor_operation/operation_cs.cpp:78

::higgs::iv_data higgs::Arduino::iv_motors (
    void)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_Arduino_Proxy_Broker_ == 0)
    {
      higgs_Arduino_setup_collocation ();
    }
  
  TAO::Arg_Traits< ::higgs::iv_data>::ret_val _tao_retval;
  
  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval
    };
  
  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      1,
      "iv_motors",
      9,
      this->the_TAO_Arduino_Proxy_Broker_
    );
  
  _tao_call.invoke (0, 0);
  
  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// ../../../ACE_wrappers/TAO/TAO_IDL/be/be_visitor_operation/operation_cs.cpp:78

::higgs::iv_data higgs::Arduino::iv_instrumentation (
    void)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_Arduino_Proxy_Broker_ == 0)
    {
      higgs_Arduino_setup_collocation ();
    }
  
  TAO::Arg_Traits< ::higgs::iv_data>::ret_val _tao_retval;
  
  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval
    };
  
  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      1,
      "iv_instrumentation",
      18,
      this->the_TAO_Arduino_Proxy_Broker_
    );
  
  _tao_call.invoke (0, 0);
  
  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// ../../../ACE_wrappers/TAO/TAO_IDL/be/be_visitor_operation/operation_cs.cpp:78

::higgs::iv_data higgs::Arduino::iv_vaio (
    void)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_Arduino_Proxy_Broker_ == 0)
    {
      higgs_Arduino_setup_collocation ();
    }
  
  TAO::Arg_Traits< ::higgs::iv_data>::ret_val _tao_retval;
  
  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval
    };
  
  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      1,
      "iv_vaio",
      7,
      this->the_TAO_Arduino_Proxy_Broker_
    );
  
  _tao_call.invoke (0, 0);
  
  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// ../../../ACE_wrappers/TAO/TAO_IDL/be/be_visitor_operation/operation_cs.cpp:78

::CORBA::Double higgs::Arduino::brujula (
    void)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_Arduino_Proxy_Broker_ == 0)
    {
      higgs_Arduino_setup_collocation ();
    }
  
  TAO::Arg_Traits< ::CORBA::Double>::ret_val _tao_retval;
  
  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval
    };
  
  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      1,
      "brujula",
      7,
      this->the_TAO_Arduino_Proxy_Broker_
    );
  
  _tao_call.invoke (0, 0);
  
  return _tao_retval.retn ();
}

// TAO_IDL - Generated from
// ../../../ACE_wrappers/TAO/TAO_IDL/be/be_visitor_operation/operation_cs.cpp:78

void higgs::Arduino::acelerometro (
    ::CORBA::Double_out x,
    ::CORBA::Double_out y)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_Arduino_Proxy_Broker_ == 0)
    {
      higgs_Arduino_setup_collocation ();
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::CORBA::Double>::out_arg_val _tao_x (x);
  TAO::Arg_Traits< ::CORBA::Double>::out_arg_val _tao_y (y);
  
  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_x,
      &_tao_y
    };
  
  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      3,
      "acelerometro",
      12,
      this->the_TAO_Arduino_Proxy_Broker_
    );
  
  _tao_call.invoke (0, 0);
}

// TAO_IDL - Generated from
// ../../../ACE_wrappers/TAO/TAO_IDL/be/be_visitor_operation/operation_cs.cpp:78

void higgs::Arduino::TurnOn (
    ::higgs::Device dev)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_Arduino_Proxy_Broker_ == 0)
    {
      higgs_Arduino_setup_collocation ();
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::higgs::Device>::in_arg_val _tao_dev (dev);
  
  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_dev
    };
  
  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      2,
      "TurnOn",
      6,
      this->the_TAO_Arduino_Proxy_Broker_
    );
  
  _tao_call.invoke (0, 0);
}

// TAO_IDL - Generated from
// ../../../ACE_wrappers/TAO/TAO_IDL/be/be_visitor_operation/operation_cs.cpp:78

void higgs::Arduino::TurnOff (
    ::higgs::Device dev)
{
  if (!this->is_evaluated ())
    {
      ::CORBA::Object::tao_object_initialize (this);
    }
  
  if (this->the_TAO_Arduino_Proxy_Broker_ == 0)
    {
      higgs_Arduino_setup_collocation ();
    }
  
  TAO::Arg_Traits< void>::ret_val _tao_retval;
  TAO::Arg_Traits< ::higgs::Device>::in_arg_val _tao_dev (dev);
  
  TAO::Argument *_the_tao_operation_signature [] =
    {
      &_tao_retval,
      &_tao_dev
    };
  
  TAO::Invocation_Adapter _tao_call (
      this,
      _the_tao_operation_signature,
      2,
      "TurnOff",
      7,
      this->the_TAO_Arduino_Proxy_Broker_
    );
  
  _tao_call.invoke (0, 0);
}

higgs::Arduino::Arduino (void)
 : the_TAO_Arduino_Proxy_Broker_ (0)
{
  this->higgs_Arduino_setup_collocation ();
}

void
higgs::Arduino::higgs_Arduino_setup_collocation ()
{
  if (::higgs__TAO_Arduino_Proxy_Broker_Factory_function_pointer)
    {
      this->the_TAO_Arduino_Proxy_Broker_ =
        ::higgs__TAO_Arduino_Proxy_Broker_Factory_function_pointer (this);
    }
}

higgs::Arduino::~Arduino (void)
{}

void 
higgs::Arduino::_tao_any_destructor (void *_tao_void_pointer)
{
  Arduino *_tao_tmp_pointer =
    static_cast<Arduino *> (_tao_void_pointer);
  ::CORBA::release (_tao_tmp_pointer);
}

higgs::Arduino_ptr
higgs::Arduino::_narrow (
    ::CORBA::Object_ptr _tao_objref
  )
{
  return
    TAO::Narrow_Utils<Arduino>::narrow (
        _tao_objref,
        "IDL:higgs/Arduino:1.0",
        higgs__TAO_Arduino_Proxy_Broker_Factory_function_pointer
      );
}

higgs::Arduino_ptr
higgs::Arduino::_unchecked_narrow (
    ::CORBA::Object_ptr _tao_objref
  )
{
  return
    TAO::Narrow_Utils<Arduino>::unchecked_narrow (
        _tao_objref,
        "IDL:higgs/Arduino:1.0",
        higgs__TAO_Arduino_Proxy_Broker_Factory_function_pointer
      );
}

higgs::Arduino_ptr
higgs::Arduino::_duplicate (Arduino_ptr obj)
{
  if (! ::CORBA::is_nil (obj))
    {
      obj->_add_ref ();
    }
  
  return obj;
}

void
higgs::Arduino::_tao_release (Arduino_ptr obj)
{
  ::CORBA::release (obj);
}

::CORBA::Boolean
higgs::Arduino::_is_a (const char *value)
{
  if (
      !ACE_OS::strcmp (
          value,
          "IDL:higgs/Arduino:1.0"
        ) ||
      !ACE_OS::strcmp (
          value,
          "IDL:omg.org/CORBA/Object:1.0"
        )
    )
    {
      return true; // success using local knowledge
    }
  else
    {
      return this->::CORBA::Object::_is_a (value);
    }
}

const char* higgs::Arduino::_interface_repository_id (void) const
{
  return "IDL:higgs/Arduino:1.0";
}

::CORBA::Boolean
higgs::Arduino::marshal (TAO_OutputCDR &cdr)
{
  return (cdr << this);
}

// TAO_IDL - Generated from
// ../../../ACE_wrappers/TAO/TAO_IDL/be/be_visitor_typecode/objref_typecode.cpp:76

static TAO::TypeCode::Objref<char const *,
                             TAO::Null_RefCount_Policy>
  _tao_tc_higgs_Arduino (
    ::CORBA::tk_objref,
    "IDL:higgs/Arduino:1.0",
    "Arduino");
  
namespace higgs
{
  ::CORBA::TypeCode_ptr const _tc_Arduino =
    &_tao_tc_higgs_Arduino;
}



// TAO_IDL - Generated from
// ../../../ACE_wrappers/TAO/TAO_IDL/be/be_visitor_enum/any_op_cs.cpp:52

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

void operator<<= (
    ::CORBA::Any &_tao_any,
    higgs::Device _tao_elem
  )
{
  TAO::Any_Basic_Impl_T<higgs::Device>::insert (
      _tao_any,
      higgs::_tc_Device,
      _tao_elem
    );
}

::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    higgs::Device &_tao_elem
  )
{
  return
    TAO::Any_Basic_Impl_T<higgs::Device>::extract (
        _tao_any,
        higgs::_tc_Device,
        _tao_elem 
      );
}
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from 
// ../../../ACE_wrappers/TAO/TAO_IDL/be/be_visitor_structure/any_op_cs.cpp:54


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

// Copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    const higgs::iv_data &_tao_elem
  )
{
  if (0 == &_tao_elem) // Trying to de-reference NULL object
    _tao_any <<= static_cast<higgs::iv_data *>( 0 ); // Use non-copying insertion of a NULL
  else
    TAO::Any_Dual_Impl_T<higgs::iv_data>::insert_copy (
        _tao_any,
        higgs::iv_data::_tao_any_destructor,
        higgs::_tc_iv_data,
        _tao_elem
      );
}

// Non-copying insertion.
void operator<<= (
    ::CORBA::Any &_tao_any,
    higgs::iv_data *_tao_elem
  )
{
  TAO::Any_Dual_Impl_T<higgs::iv_data>::insert (
      _tao_any,
      higgs::iv_data::_tao_any_destructor,
      higgs::_tc_iv_data,
      _tao_elem
    );
}

// Extraction to non-const pointer (deprecated).
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    higgs::iv_data *&_tao_elem
  )
{
  return _tao_any >>= const_cast<
      const higgs::iv_data *&> (
      _tao_elem
    );
}

// Extraction to const pointer.
::CORBA::Boolean operator>>= (
    const ::CORBA::Any &_tao_any,
    const higgs::iv_data *&_tao_elem
  )
{
  return
    TAO::Any_Dual_Impl_T<higgs::iv_data>::extract (
        _tao_any,
        higgs::iv_data::_tao_any_destructor,
        higgs::_tc_iv_data,
        _tao_elem
      );
}
TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// ../../../ACE_wrappers/TAO/TAO_IDL/be/be_visitor_interface/any_op_cs.cpp:51
TAO_BEGIN_VERSIONED_NAMESPACE_DECL



namespace TAO
{
  template<>
  ::CORBA::Boolean
  Any_Impl_T<higgs::Arduino>::to_object (
      ::CORBA::Object_ptr &_tao_elem
    ) const
  {
    _tao_elem = ::CORBA::Object::_duplicate (this->value_);
    return true;
  }
}
TAO_END_VERSIONED_NAMESPACE_DECL



#if defined (ACE_ANY_OPS_USE_NAMESPACE)

namespace higgs
{
  
  
  /// Copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      Arduino_ptr _tao_elem)
  {
    Arduino_ptr _tao_objptr =
      Arduino::_duplicate (_tao_elem);
    _tao_any <<= &_tao_objptr;
  }
  
  /// Non-copying insertion.
  void
  operator<<= (
      ::CORBA::Any &_tao_any,
      Arduino_ptr *_tao_elem)
  {
    TAO::Any_Impl_T<Arduino>::insert (
        _tao_any,
        Arduino::_tao_any_destructor,
        _tc_Arduino,
        *_tao_elem)
  }
  
  ::CORBA::Boolean
  operator>>= (
      const ::CORBA::Any &_tao_any,
      Arduino_ptr &_tao_elem)
  {
    return
      TAO::Any_Impl_T<Arduino>::extract (
          _tao_any,
          Arduino::_tao_any_destructor,
          _tc_Arduino,
          _tao_elem)
  }
}

#else

TAO_BEGIN_VERSIONED_NAMESPACE_DECL



/// Copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    higgs::Arduino_ptr _tao_elem)
{
  higgs::Arduino_ptr _tao_objptr =
    higgs::Arduino::_duplicate (_tao_elem);
  _tao_any <<= &_tao_objptr;
}

/// Non-copying insertion.
void
operator<<= (
    ::CORBA::Any &_tao_any,
    higgs::Arduino_ptr *_tao_elem)
{
  TAO::Any_Impl_T<higgs::Arduino>::insert (
      _tao_any,
      higgs::Arduino::_tao_any_destructor,
      higgs::_tc_Arduino,
      *_tao_elem);
}

::CORBA::Boolean
operator>>= (
    const ::CORBA::Any &_tao_any,
    higgs::Arduino_ptr &_tao_elem)
{
  return
    TAO::Any_Impl_T<higgs::Arduino>::extract (
        _tao_any,
        higgs::Arduino::_tao_any_destructor,
        higgs::_tc_Arduino,
        _tao_elem);
}

TAO_END_VERSIONED_NAMESPACE_DECL



#endif

// TAO_IDL - Generated from
// ../../../ACE_wrappers/TAO/TAO_IDL/be/be_visitor_enum/cdr_op_cs.cpp:51


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (TAO_OutputCDR &strm, higgs::Device _tao_enumerator)
{
  return strm << static_cast< ::CORBA::ULong> (_tao_enumerator);
}

::CORBA::Boolean operator>> (TAO_InputCDR &strm, higgs::Device & _tao_enumerator)
{
  ::CORBA::ULong _tao_temp = 0;
  ::CORBA::Boolean const _tao_success = strm >> _tao_temp;
  
  if (_tao_success)
    {
      _tao_enumerator = static_cast<higgs::Device> (_tao_temp);
    }
  
  return _tao_success;
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// ../../../ACE_wrappers/TAO/TAO_IDL/be/be_visitor_structure/cdr_op_cs.cpp:61


TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const higgs::iv_data &_tao_aggregate
  )
{
  return
    (strm << _tao_aggregate.current) &&
    (strm << _tao_aggregate.volts);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    higgs::iv_data &_tao_aggregate
  )
{
  return
    (strm >> _tao_aggregate.current) &&
    (strm >> _tao_aggregate.volts);
}

TAO_END_VERSIONED_NAMESPACE_DECL



// TAO_IDL - Generated from
// ../../../ACE_wrappers/TAO/TAO_IDL/be/be_visitor_interface/cdr_op_cs.cpp:63

TAO_BEGIN_VERSIONED_NAMESPACE_DECL

::CORBA::Boolean operator<< (
    TAO_OutputCDR &strm,
    const higgs::Arduino_ptr _tao_objref)
{
  ::CORBA::Object_ptr _tao_corba_obj = _tao_objref;
  return (strm << _tao_corba_obj);
}

::CORBA::Boolean operator>> (
    TAO_InputCDR &strm,
    higgs::Arduino_ptr &_tao_objref)
{
  ::CORBA::Object_var obj;
  
  if (!(strm >> obj.inout ()))
    {
      return false;
    }
  
  typedef ::higgs::Arduino RHS_SCOPED_NAME;
  
  // Narrow to the right type.
  _tao_objref =
    TAO::Narrow_Utils<RHS_SCOPED_NAME>::unchecked_narrow (
        obj.in (),
        higgs__TAO_Arduino_Proxy_Broker_Factory_function_pointer
      );
    
  return true;
}

TAO_END_VERSIONED_NAMESPACE_DECL



